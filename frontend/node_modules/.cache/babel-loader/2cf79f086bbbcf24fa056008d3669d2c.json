{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupIbcExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst query_1 = require(\"cosmjs-types/ibc/applications/transfer/v1/query\");\n\nconst channel_1 = require(\"cosmjs-types/ibc/core/channel/v1/channel\");\n\nconst query_2 = require(\"cosmjs-types/ibc/core/channel/v1/query\");\n\nconst query_3 = require(\"cosmjs-types/ibc/core/client/v1/query\");\n\nconst query_4 = require(\"cosmjs-types/ibc/core/connection/v1/query\");\n\nconst tendermint_1 = require(\"cosmjs-types/ibc/lightclients/tendermint/v1/tendermint\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst utils_1 = require(\"./utils\");\n\nfunction decodeTendermintClientStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ClientState\") {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n\n  return tendermint_1.ClientState.decode(clientState.value);\n}\n\nfunction decodeTendermintConsensusStateAny(clientState) {\n  if ((clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl) !== \"/ibc.lightclients.tendermint.v1.ConsensusState\") {\n    throw new Error(`Unexpected client state type: ${clientState === null || clientState === void 0 ? void 0 : clientState.typeUrl}`);\n  }\n\n  return tendermint_1.ConsensusState.decode(clientState.value);\n}\n\nfunction setupIbcExtension(base) {\n  const rpc = utils_1.createProtobufRpcClient(base); // Use these services to get easy typed access to query methods\n  // These cannot be used for proof verification\n\n  const channelQueryService = new query_2.QueryClientImpl(rpc);\n  const clientQueryService = new query_3.QueryClientImpl(rpc);\n  const connectionQueryService = new query_4.QueryClientImpl(rpc);\n  const transferQueryService = new query_1.QueryClientImpl(rpc);\n  return {\n    ibc: {\n      channel: {\n        channel: async (portId, channelId) => channelQueryService.Channel({\n          portId: portId,\n          channelId: channelId\n        }),\n        channels: async paginationKey => channelQueryService.Channels({\n          pagination: utils_1.createPagination(paginationKey)\n        }),\n        allChannels: async () => {\n          var _a;\n\n          const channels = [];\n          let response;\n          let key;\n\n          do {\n            response = await channelQueryService.Channels({\n              pagination: utils_1.createPagination(key)\n            });\n            channels.push(...response.channels);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            channels: channels,\n            height: response.height\n          };\n        },\n        connectionChannels: async (connection, paginationKey) => channelQueryService.ConnectionChannels({\n          connection: connection,\n          pagination: utils_1.createPagination(paginationKey)\n        }),\n        allConnectionChannels: async connection => {\n          var _a;\n\n          const channels = [];\n          let response;\n          let key;\n\n          do {\n            response = await channelQueryService.ConnectionChannels({\n              connection: connection,\n              pagination: utils_1.createPagination(key)\n            });\n            channels.push(...response.channels);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            channels: channels,\n            height: response.height\n          };\n        },\n        clientState: async (portId, channelId) => channelQueryService.ChannelClientState({\n          portId: portId,\n          channelId: channelId\n        }),\n        consensusState: async (portId, channelId, revisionNumber, revisionHeight) => channelQueryService.ChannelConsensusState({\n          portId: portId,\n          channelId: channelId,\n          revisionNumber: long_1.default.fromNumber(revisionNumber, true),\n          revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n        }),\n        packetCommitment: async (portId, channelId, sequence) => channelQueryService.PacketCommitment({\n          portId: portId,\n          channelId: channelId,\n          sequence: sequence\n        }),\n        packetCommitments: async (portId, channelId, paginationKey) => channelQueryService.PacketCommitments({\n          channelId: channelId,\n          portId: portId,\n          pagination: utils_1.createPagination(paginationKey)\n        }),\n        allPacketCommitments: async (portId, channelId) => {\n          var _a;\n\n          const commitments = [];\n          let response;\n          let key;\n\n          do {\n            response = await channelQueryService.PacketCommitments({\n              channelId: channelId,\n              portId: portId,\n              pagination: utils_1.createPagination(key)\n            });\n            commitments.push(...response.commitments);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            commitments: commitments,\n            height: response.height\n          };\n        },\n        packetReceipt: async (portId, channelId, sequence) => channelQueryService.PacketReceipt({\n          portId: portId,\n          channelId: channelId,\n          sequence: long_1.default.fromNumber(sequence, true)\n        }),\n        packetAcknowledgement: async (portId, channelId, sequence) => channelQueryService.PacketAcknowledgement({\n          portId: portId,\n          channelId: channelId,\n          sequence: long_1.default.fromNumber(sequence, true)\n        }),\n        packetAcknowledgements: async (portId, channelId, paginationKey) => channelQueryService.PacketAcknowledgements({\n          portId: portId,\n          channelId: channelId,\n          pagination: utils_1.createPagination(paginationKey)\n        }),\n        allPacketAcknowledgements: async (portId, channelId) => {\n          var _a;\n\n          const acknowledgements = [];\n          let response;\n          let key;\n\n          do {\n            response = await channelQueryService.PacketAcknowledgements({\n              channelId: channelId,\n              portId: portId,\n              pagination: utils_1.createPagination(key)\n            });\n            acknowledgements.push(...response.acknowledgements);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            acknowledgements: acknowledgements,\n            height: response.height\n          };\n        },\n        unreceivedPackets: async (portId, channelId, packetCommitmentSequences) => channelQueryService.UnreceivedPackets({\n          portId: portId,\n          channelId: channelId,\n          packetCommitmentSequences: packetCommitmentSequences.map(s => long_1.default.fromNumber(s, true))\n        }),\n        unreceivedAcks: async (portId, channelId, packetAckSequences) => channelQueryService.UnreceivedAcks({\n          portId: portId,\n          channelId: channelId,\n          packetAckSequences: packetAckSequences.map(s => long_1.default.fromNumber(s, true))\n        }),\n        nextSequenceReceive: async (portId, channelId) => channelQueryService.NextSequenceReceive({\n          portId: portId,\n          channelId: channelId\n        })\n      },\n      client: {\n        state: async clientId => clientQueryService.ClientState({\n          clientId\n        }),\n        states: async paginationKey => clientQueryService.ClientStates({\n          pagination: utils_1.createPagination(paginationKey)\n        }),\n        allStates: async () => {\n          var _a;\n\n          const clientStates = [];\n          let response;\n          let key;\n\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: utils_1.createPagination(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            clientStates: clientStates\n          };\n        },\n        consensusState: async (clientId, consensusHeight) => clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n          clientId: clientId,\n          revisionHeight: consensusHeight !== undefined ? long_1.default.fromNumber(consensusHeight, true) : undefined,\n          latestHeight: consensusHeight === undefined\n        })),\n        consensusStates: async (clientId, paginationKey) => clientQueryService.ConsensusStates({\n          clientId: clientId,\n          pagination: utils_1.createPagination(paginationKey)\n        }),\n        allConsensusStates: async clientId => {\n          var _a;\n\n          const consensusStates = [];\n          let response;\n          let key;\n\n          do {\n            response = await clientQueryService.ConsensusStates({\n              clientId: clientId,\n              pagination: utils_1.createPagination(key)\n            });\n            consensusStates.push(...response.consensusStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            consensusStates: consensusStates\n          };\n        },\n        params: async () => clientQueryService.ClientParams({}),\n        stateTm: async clientId => {\n          const response = await clientQueryService.ClientState({\n            clientId\n          });\n          return decodeTendermintClientStateAny(response.clientState);\n        },\n        statesTm: async paginationKey => {\n          const {\n            clientStates\n          } = await clientQueryService.ClientStates({\n            pagination: utils_1.createPagination(paginationKey)\n          });\n          return clientStates.map(_ref => {\n            let {\n              clientState\n            } = _ref;\n            return decodeTendermintClientStateAny(clientState);\n          });\n        },\n        allStatesTm: async () => {\n          var _a;\n\n          const clientStates = [];\n          let response;\n          let key;\n\n          do {\n            response = await clientQueryService.ClientStates({\n              pagination: utils_1.createPagination(key)\n            });\n            clientStates.push(...response.clientStates);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return clientStates.map(_ref2 => {\n            let {\n              clientState\n            } = _ref2;\n            return decodeTendermintClientStateAny(clientState);\n          });\n        },\n        consensusStateTm: async (clientId, consensusHeight) => {\n          const response = await clientQueryService.ConsensusState(query_3.QueryConsensusStateRequest.fromPartial({\n            clientId: clientId,\n            revisionHeight: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionHeight,\n            revisionNumber: consensusHeight === null || consensusHeight === void 0 ? void 0 : consensusHeight.revisionNumber,\n            latestHeight: consensusHeight === undefined\n          }));\n          return decodeTendermintConsensusStateAny(response.consensusState);\n        }\n      },\n      connection: {\n        connection: async connectionId => connectionQueryService.Connection({\n          connectionId: connectionId\n        }),\n        connections: async paginationKey => connectionQueryService.Connections({\n          pagination: utils_1.createPagination(paginationKey)\n        }),\n        allConnections: async () => {\n          var _a;\n\n          const connections = [];\n          let response;\n          let key;\n\n          do {\n            response = await connectionQueryService.Connections({\n              pagination: utils_1.createPagination(key)\n            });\n            connections.push(...response.connections);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            connections: connections,\n            height: response.height\n          };\n        },\n        clientConnections: async clientId => connectionQueryService.ClientConnections({\n          clientId: clientId\n        }),\n        clientState: async connectionId => connectionQueryService.ConnectionClientState({\n          connectionId: connectionId\n        }),\n        consensusState: async (connectionId, revisionHeight) => connectionQueryService.ConnectionConsensusState(query_4.QueryConnectionConsensusStateRequest.fromPartial({\n          connectionId: connectionId,\n          revisionHeight: long_1.default.fromNumber(revisionHeight, true)\n        }))\n      },\n      transfer: {\n        denomTrace: async hash => transferQueryService.DenomTrace({\n          hash: hash\n        }),\n        denomTraces: async paginationKey => transferQueryService.DenomTraces({\n          pagination: utils_1.createPagination(paginationKey)\n        }),\n        allDenomTraces: async () => {\n          var _a;\n\n          const denomTraces = [];\n          let response;\n          let key;\n\n          do {\n            response = await transferQueryService.DenomTraces({\n              pagination: utils_1.createPagination(key)\n            });\n            denomTraces.push(...response.denomTraces);\n            key = (_a = response.pagination) === null || _a === void 0 ? void 0 : _a.nextKey;\n          } while (key && key.length);\n\n          return {\n            denomTraces: denomTraces\n          };\n        },\n        params: async () => transferQueryService.Params({})\n      },\n      verified: {\n        channel: {\n          channel: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L55-L65\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L117-L120\n            const key = encoding_1.toAscii(`channelEnds/ports/${portId}/channels/${channelId}`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            return responseData.length ? channel_1.Channel.decode(responseData) : null;\n          },\n          packetCommitment: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L128-L133\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L183-L185\n            const key = encoding_1.toAscii(`commitments/ports/${portId}/channels/${channelId}/packets/${sequence}`);\n            const responseData = await base.queryVerified(\"ibc\", key); // keeper code doesn't parse, but returns raw\n\n            return responseData;\n          },\n          packetAcknowledgement: async (portId, channelId, sequence) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L159-L166\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L153-L156\n            const key = encoding_1.toAscii(`acks/ports/${portId}/channels/${channelId}/acknowledgements/${sequence}`);\n            const responseData = await base.queryVerified(\"ibc\", key); // keeper code doesn't parse, but returns raw\n\n            return responseData;\n          },\n          nextSequenceReceive: async (portId, channelId) => {\n            // keeper: https://github.com/cosmos/cosmos-sdk/blob/3bafd8255a502e5a9cee07391cf8261538245dfd/x/ibc/04-channel/keeper/keeper.go#L92-L101\n            // key: https://github.com/cosmos/cosmos-sdk/blob/ef0a7344af345882729598bc2958a21143930a6b/x/ibc/24-host/keys.go#L133-L136\n            const key = encoding_1.toAscii(`seqAcks/ports/${portId}/channels/${channelId}/nextSequenceAck`);\n            const responseData = await base.queryVerified(\"ibc\", key);\n            return responseData.length ? math_1.Uint64.fromBytes(responseData).toNumber() : null;\n          }\n        }\n      }\n    }\n  };\n}\n\nexports.setupIbcExtension = setupIbcExtension;","map":{"version":3,"mappings":"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","names":["decodeTendermintClientStateAny","clientState","typeUrl","Error","tendermint_1","decode","value","decodeTendermintConsensusStateAny","setupIbcExtension","base","rpc","utils_1","channelQueryService","query_2","clientQueryService","query_3","connectionQueryService","query_4","transferQueryService","query_1","ibc","channel","portId","channelId","Channel","channels","paginationKey","Channels","pagination","allChannels","response","key","push","_a","nextKey","length","height","connectionChannels","connection","ConnectionChannels","allConnectionChannels","ChannelClientState","consensusState","revisionNumber","revisionHeight","ChannelConsensusState","long_1","fromNumber","packetCommitment","sequence","PacketCommitment","packetCommitments","PacketCommitments","allPacketCommitments","commitments","packetReceipt","PacketReceipt","packetAcknowledgement","PacketAcknowledgement","packetAcknowledgements","PacketAcknowledgements","allPacketAcknowledgements","acknowledgements","unreceivedPackets","packetCommitmentSequences","UnreceivedPackets","map","s","unreceivedAcks","packetAckSequences","UnreceivedAcks","nextSequenceReceive","NextSequenceReceive","client","state","clientId","ClientState","states","ClientStates","allStates","clientStates","consensusHeight","ConsensusState","fromPartial","undefined","latestHeight","consensusStates","ConsensusStates","allConsensusStates","params","ClientParams","stateTm","statesTm","allStatesTm","consensusStateTm","connectionId","Connection","connections","Connections","allConnections","clientConnections","ClientConnections","ConnectionClientState","ConnectionConsensusState","transfer","denomTrace","hash","DenomTrace","denomTraces","DenomTraces","allDenomTraces","Params","verified","encoding_1","responseData","queryVerified","channel_1","math_1","fromBytes","toNumber","exports"],"sourceRoot":"","sources":["../../src/queries/ibc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}