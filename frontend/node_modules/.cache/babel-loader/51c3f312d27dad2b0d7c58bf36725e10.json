{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToPath = exports.pathToString = exports.Slip10 = exports.Slip10RawIndex = exports.slip10CurveFromString = exports.Slip10Curve = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\n\nconst hmac_1 = require(\"./hmac\");\n\nconst sha_1 = require(\"./sha\");\n/**\n * Raw values must match the curve string in SLIP-0010 master key generation\n *\n * @see https://github.com/satoshilabs/slips/blob/master/slip-0010.md#master-key-generation\n */\n\n\nvar Slip10Curve;\n\n(function (Slip10Curve) {\n  Slip10Curve[\"Secp256k1\"] = \"Bitcoin seed\";\n  Slip10Curve[\"Ed25519\"] = \"ed25519 seed\";\n})(Slip10Curve = exports.Slip10Curve || (exports.Slip10Curve = {}));\n/**\n * Reverse mapping of Slip10Curve\n */\n\n\nfunction slip10CurveFromString(curveString) {\n  switch (curveString) {\n    case Slip10Curve.Ed25519:\n      return Slip10Curve.Ed25519;\n\n    case Slip10Curve.Secp256k1:\n      return Slip10Curve.Secp256k1;\n\n    default:\n      throw new Error(`Unknown curve string: '${curveString}'`);\n  }\n}\n\nexports.slip10CurveFromString = slip10CurveFromString;\n\nclass Slip10RawIndex extends math_1.Uint32 {\n  static hardened(hardenedIndex) {\n    return new Slip10RawIndex(hardenedIndex + 2 ** 31);\n  }\n\n  static normal(normalIndex) {\n    return new Slip10RawIndex(normalIndex);\n  }\n\n  isHardened() {\n    return this.data >= 2 ** 31;\n  }\n\n}\n\nexports.Slip10RawIndex = Slip10RawIndex;\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\"); // Universal private key derivation accoring to\n// https://github.com/satoshilabs/slips/blob/master/slip-0010.md\n\nclass Slip10 {\n  static derivePath(curve, seed, path) {\n    let result = this.master(curve, seed);\n\n    for (const rawIndex of path) {\n      result = this.child(curve, result.privkey, result.chainCode, rawIndex);\n    }\n\n    return result;\n  }\n\n  static master(curve, seed) {\n    const i = new hmac_1.Hmac(sha_1.Sha512, encoding_1.toAscii(curve)).update(seed).digest();\n    const il = i.slice(0, 32);\n    const ir = i.slice(32, 64);\n\n    if (curve !== Slip10Curve.Ed25519 && (this.isZero(il) || this.isGteN(curve, il))) {\n      return this.master(curve, i);\n    }\n\n    return {\n      chainCode: ir,\n      privkey: il\n    };\n  }\n\n  static child(curve, parentPrivkey, parentChainCode, rawIndex) {\n    let i;\n\n    if (rawIndex.isHardened()) {\n      const payload = new Uint8Array([0x00, ...parentPrivkey, ...rawIndex.toBytesBigEndian()]);\n      i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(payload).digest();\n    } else {\n      if (curve === Slip10Curve.Ed25519) {\n        throw new Error(\"Normal keys are not allowed with ed25519\");\n      } else {\n        // Step 1 of https://github.com/satoshilabs/slips/blob/master/slip-0010.md#private-parent-key--private-child-key\n        // Calculate I = HMAC-SHA512(Key = c_par, Data = ser_P(point(k_par)) || ser_32(i)).\n        // where the functions point() and ser_p() are defined in BIP-0032\n        const data = new Uint8Array([...Slip10.serializedPoint(curve, new bn_js_1.default(parentPrivkey)), ...rawIndex.toBytesBigEndian()]);\n        i = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(data).digest();\n      }\n    }\n\n    return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i);\n  }\n  /**\n   * Implementation of ser_P(point(k_par)) from BIP-0032\n   *\n   * @see https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n   */\n\n\n  static serializedPoint(curve, p) {\n    switch (curve) {\n      case Slip10Curve.Secp256k1:\n        return encoding_1.fromHex(secp256k1.g.mul(p).encodeCompressed(\"hex\"));\n\n      default:\n        throw new Error(\"curve not supported\");\n    }\n  }\n\n  static childImpl(curve, parentPrivkey, parentChainCode, rawIndex, i) {\n    // step 2 (of the Private parent key â†’ private child key algorithm)\n    const il = i.slice(0, 32);\n    const ir = i.slice(32, 64); // step 3\n\n    const returnChainCode = ir; // step 4\n\n    if (curve === Slip10Curve.Ed25519) {\n      return {\n        chainCode: returnChainCode,\n        privkey: il\n      };\n    } // step 5\n\n\n    const n = this.n(curve);\n    const returnChildKeyAsNumber = new bn_js_1.default(il).add(new bn_js_1.default(parentPrivkey)).mod(n);\n    const returnChildKey = Uint8Array.from(returnChildKeyAsNumber.toArray(\"be\", 32)); // step 6\n\n    if (this.isGteN(curve, il) || this.isZero(returnChildKey)) {\n      const newI = new hmac_1.Hmac(sha_1.Sha512, parentChainCode).update(new Uint8Array([0x01, ...ir, ...rawIndex.toBytesBigEndian()])).digest();\n      return this.childImpl(curve, parentPrivkey, parentChainCode, rawIndex, newI);\n    } // step 7\n\n\n    return {\n      chainCode: returnChainCode,\n      privkey: returnChildKey\n    };\n  }\n\n  static isZero(privkey) {\n    return privkey.every(byte => byte === 0);\n  }\n\n  static isGteN(curve, privkey) {\n    const keyAsNumber = new bn_js_1.default(privkey);\n    return keyAsNumber.gte(this.n(curve));\n  }\n\n  static n(curve) {\n    switch (curve) {\n      case Slip10Curve.Secp256k1:\n        return new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", 16);\n\n      default:\n        throw new Error(\"curve not supported\");\n    }\n  }\n\n}\n\nexports.Slip10 = Slip10;\n\nfunction pathToString(path) {\n  return path.reduce((current, component) => {\n    const componentString = component.isHardened() ? `${component.toNumber() - 2 ** 31}'` : component.toString();\n    return current + \"/\" + componentString;\n  }, \"m\");\n}\n\nexports.pathToString = pathToString;\n\nfunction stringToPath(input) {\n  if (!input.startsWith(\"m\")) throw new Error(\"Path string must start with 'm'\");\n  let rest = input.slice(1);\n  const out = new Array();\n\n  while (rest) {\n    const match = rest.match(/^\\/([0-9]+)('?)/);\n    if (!match) throw new Error(\"Syntax error while reading path component\");\n    const [fullMatch, numberString, apostrophe] = match;\n    const value = math_1.Uint53.fromString(numberString).toNumber();\n    if (value >= 2 ** 31) throw new Error(\"Component value too high. Must not exceed 2**31-1.\");\n    if (apostrophe) out.push(Slip10RawIndex.hardened(value));else out.push(Slip10RawIndex.normal(value));\n    rest = rest.slice(fullMatch.length);\n  }\n\n  return out;\n}\n\nexports.stringToPath = stringToPath;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;AAOA;;;;;;;AAKA,IAAYA,WAAZ;;AAAA,WAAYA,WAAZ,EAAuB;AACrBA;AACAA;AACD,CAHD,EAAYA,WAAW,GAAXC,8CAAW,EAAX,CAAZ;AAKA;;;;;AAGA,SAAgBC,qBAAhB,CAAsCC,WAAtC,EAAyD;AACvD,UAAQA,WAAR;AACE,SAAKH,WAAW,CAACI,OAAjB;AACE,aAAOJ,WAAW,CAACI,OAAnB;;AACF,SAAKJ,WAAW,CAACK,SAAjB;AACE,aAAOL,WAAW,CAACK,SAAnB;;AACF;AACE,YAAM,IAAIC,KAAJ,CAAU,0BAA0BH,WAAW,GAA/C,CAAN;AANJ;AAQD;;AATDF;;AAWA,MAAaM,cAAb,SAAoCC,aAApC,CAA0C;AAClB,SAARC,QAAQ,CAACC,aAAD,EAAsB;AAC1C,WAAO,IAAIH,cAAJ,CAAmBG,aAAa,GAAG,KAAK,EAAxC,CAAP;AACD;;AAEmB,SAANC,MAAM,CAACC,WAAD,EAAoB;AACtC,WAAO,IAAIL,cAAJ,CAAmBK,WAAnB,CAAP;AACD;;AAEMC,YAAU;AACf,WAAO,KAAKC,IAAL,IAAa,KAAK,EAAzB;AACD;;AAXuC;;AAA1Cb;AA0CA,MAAMc,SAAS,GAAG,IAAIC,mBAASC,EAAb,CAAgB,WAAhB,CAAlB,C,CAEA;AACA;;AACA,MAAaC,MAAb,CAAmB;AACO,SAAVC,UAAU,CAACC,KAAD,EAAqBC,IAArB,EAAuCC,IAAvC,EAAmD;AACzE,QAAIC,MAAM,GAAG,KAAKC,MAAL,CAAYJ,KAAZ,EAAmBC,IAAnB,CAAb;;AACA,SAAK,MAAMI,QAAX,IAAuBH,IAAvB,EAA6B;AAC3BC,YAAM,GAAG,KAAKG,KAAL,CAAWN,KAAX,EAAkBG,MAAM,CAACI,OAAzB,EAAkCJ,MAAM,CAACK,SAAzC,EAAoDH,QAApD,CAAT;AACD;;AACD,WAAOF,MAAP;AACD;;AAEoB,SAANC,MAAM,CAACJ,KAAD,EAAqBC,IAArB,EAAqC;AACxD,UAAMQ,CAAC,GAAG,IAAIC,WAAJ,CAASC,YAAT,EAAiBC,mBAAQZ,KAAR,CAAjB,EAAiCa,MAAjC,CAAwCZ,IAAxC,EAA8Ca,MAA9C,EAAV;AACA,UAAMC,EAAE,GAAGN,CAAC,CAACO,KAAF,CAAQ,CAAR,EAAW,EAAX,CAAX;AACA,UAAMC,EAAE,GAAGR,CAAC,CAACO,KAAF,CAAQ,EAAR,EAAY,EAAZ,CAAX;;AAEA,QAAIhB,KAAK,KAAKpB,WAAW,CAACI,OAAtB,KAAkC,KAAKkC,MAAL,CAAYH,EAAZ,KAAmB,KAAKI,MAAL,CAAYnB,KAAZ,EAAmBe,EAAnB,CAArD,CAAJ,EAAkF;AAChF,aAAO,KAAKX,MAAL,CAAYJ,KAAZ,EAAmBS,CAAnB,CAAP;AACD;;AAED,WAAO;AACLD,eAAS,EAAES,EADN;AAELV,aAAO,EAAEQ;AAFJ,KAAP;AAID;;AAEmB,SAALT,KAAK,CAClBN,KADkB,EAElBoB,aAFkB,EAGlBC,eAHkB,EAIlBhB,QAJkB,EAIM;AAExB,QAAII,CAAJ;;AACA,QAAIJ,QAAQ,CAACZ,UAAT,EAAJ,EAA2B;AACzB,YAAM6B,OAAO,GAAG,IAAIC,UAAJ,CAAe,CAAC,IAAD,EAAO,GAAGH,aAAV,EAAyB,GAAGf,QAAQ,CAACmB,gBAAT,EAA5B,CAAf,CAAhB;AACAf,OAAC,GAAG,IAAIC,WAAJ,CAASC,YAAT,EAAiBU,eAAjB,EAAkCR,MAAlC,CAAyCS,OAAzC,EAAkDR,MAAlD,EAAJ;AACD,KAHD,MAGO;AACL,UAAId,KAAK,KAAKpB,WAAW,CAACI,OAA1B,EAAmC;AACjC,cAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACD,OAFD,MAEO;AACL;AACA;AACA;AACA,cAAMQ,IAAI,GAAG,IAAI6B,UAAJ,CAAe,CAC1B,GAAGzB,MAAM,CAAC2B,eAAP,CAAuBzB,KAAvB,EAA8B,IAAI0B,eAAJ,CAAON,aAAP,CAA9B,CADuB,EAE1B,GAAGf,QAAQ,CAACmB,gBAAT,EAFuB,CAAf,CAAb;AAIAf,SAAC,GAAG,IAAIC,WAAJ,CAASC,YAAT,EAAiBU,eAAjB,EAAkCR,MAAlC,CAAyCnB,IAAzC,EAA+CoB,MAA/C,EAAJ;AACD;AACF;;AAED,WAAO,KAAKa,SAAL,CAAe3B,KAAf,EAAsBoB,aAAtB,EAAqCC,eAArC,EAAsDhB,QAAtD,EAAgEI,CAAhE,CAAP;AACD;AAED;;;;;;;AAK8B,SAAfgB,eAAe,CAACzB,KAAD,EAAqB4B,CAArB,EAA0B;AACtD,YAAQ5B,KAAR;AACE,WAAKpB,WAAW,CAACK,SAAjB;AACE,eAAO2B,mBAAQjB,SAAS,CAACkC,CAAV,CAAYC,GAAZ,CAAgBF,CAAhB,EAAmBG,gBAAnB,CAAoC,KAApC,CAAR,CAAP;;AACF;AACE,cAAM,IAAI7C,KAAJ,CAAU,qBAAV,CAAN;AAJJ;AAMD;;AAEuB,SAATyC,SAAS,CACtB3B,KADsB,EAEtBoB,aAFsB,EAGtBC,eAHsB,EAItBhB,QAJsB,EAKtBI,CALsB,EAKT;AAEb;AAEA,UAAMM,EAAE,GAAGN,CAAC,CAACO,KAAF,CAAQ,CAAR,EAAW,EAAX,CAAX;AACA,UAAMC,EAAE,GAAGR,CAAC,CAACO,KAAF,CAAQ,EAAR,EAAY,EAAZ,CAAX,CALa,CAOb;;AACA,UAAMgB,eAAe,GAAGf,EAAxB,CARa,CAUb;;AACA,QAAIjB,KAAK,KAAKpB,WAAW,CAACI,OAA1B,EAAmC;AACjC,aAAO;AACLwB,iBAAS,EAAEwB,eADN;AAELzB,eAAO,EAAEQ;AAFJ,OAAP;AAID,KAhBY,CAkBb;;;AACA,UAAMkB,CAAC,GAAG,KAAKA,CAAL,CAAOjC,KAAP,CAAV;AACA,UAAMkC,sBAAsB,GAAG,IAAIR,eAAJ,CAAOX,EAAP,EAAWoB,GAAX,CAAe,IAAIT,eAAJ,CAAON,aAAP,CAAf,EAAsCgB,GAAtC,CAA0CH,CAA1C,CAA/B;AACA,UAAMI,cAAc,GAAGd,UAAU,CAACe,IAAX,CAAgBJ,sBAAsB,CAACK,OAAvB,CAA+B,IAA/B,EAAqC,EAArC,CAAhB,CAAvB,CArBa,CAuBb;;AACA,QAAI,KAAKpB,MAAL,CAAYnB,KAAZ,EAAmBe,EAAnB,KAA0B,KAAKG,MAAL,CAAYmB,cAAZ,CAA9B,EAA2D;AACzD,YAAMG,IAAI,GAAG,IAAI9B,WAAJ,CAASC,YAAT,EAAiBU,eAAjB,EACVR,MADU,CACH,IAAIU,UAAJ,CAAe,CAAC,IAAD,EAAO,GAAGN,EAAV,EAAc,GAAGZ,QAAQ,CAACmB,gBAAT,EAAjB,CAAf,CADG,EAEVV,MAFU,EAAb;AAGA,aAAO,KAAKa,SAAL,CAAe3B,KAAf,EAAsBoB,aAAtB,EAAqCC,eAArC,EAAsDhB,QAAtD,EAAgEmC,IAAhE,CAAP;AACD,KA7BY,CA+Bb;;;AACA,WAAO;AACLhC,eAAS,EAAEwB,eADN;AAELzB,aAAO,EAAE8B;AAFJ,KAAP;AAID;;AAEoB,SAANnB,MAAM,CAACX,OAAD,EAAoB;AACvC,WAAOA,OAAO,CAACkC,KAAR,CAAeC,IAAD,IAAUA,IAAI,KAAK,CAAjC,CAAP;AACD;;AAEoB,SAANvB,MAAM,CAACnB,KAAD,EAAqBO,OAArB,EAAwC;AAC3D,UAAMoC,WAAW,GAAG,IAAIjB,eAAJ,CAAOnB,OAAP,CAApB;AACA,WAAOoC,WAAW,CAACC,GAAZ,CAAgB,KAAKX,CAAL,CAAOjC,KAAP,CAAhB,CAAP;AACD;;AAEe,SAADiC,CAAC,CAACjC,KAAD,EAAmB;AACjC,YAAQA,KAAR;AACE,WAAKpB,WAAW,CAACK,SAAjB;AACE,eAAO,IAAIyC,eAAJ,CAAO,kEAAP,EAA2E,EAA3E,CAAP;;AACF;AACE,cAAM,IAAIxC,KAAJ,CAAU,qBAAV,CAAN;AAJJ;AAMD;;AA7HgB;;AAAnBL;;AAgIA,SAAgBgE,YAAhB,CAA6B3C,IAA7B,EAAyC;AACvC,SAAOA,IAAI,CAAC4C,MAAL,CAAY,CAACC,OAAD,EAAUC,SAAV,KAA+B;AAChD,UAAMC,eAAe,GAAGD,SAAS,CAACvD,UAAV,KACpB,GAAGuD,SAAS,CAACE,QAAV,KAAuB,KAAK,EAAE,GADb,GAEpBF,SAAS,CAACG,QAAV,EAFJ;AAGA,WAAOJ,OAAO,GAAG,GAAV,GAAgBE,eAAvB;AACD,GALM,EAKJ,GALI,CAAP;AAMD;;AAPDpE;;AASA,SAAgBuE,YAAhB,CAA6BC,KAA7B,EAA0C;AACxC,MAAI,CAACA,KAAK,CAACC,UAAN,CAAiB,GAAjB,CAAL,EAA4B,MAAM,IAAIpE,KAAJ,CAAU,iCAAV,CAAN;AAC5B,MAAIqE,IAAI,GAAGF,KAAK,CAACrC,KAAN,CAAY,CAAZ,CAAX;AAEA,QAAMwC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;;AACA,SAAOF,IAAP,EAAa;AACX,UAAMG,KAAK,GAAGH,IAAI,CAACG,KAAL,CAAW,iBAAX,CAAd;AACA,QAAI,CAACA,KAAL,EAAY,MAAM,IAAIxE,KAAJ,CAAU,2CAAV,CAAN;AACZ,UAAM,CAACyE,SAAD,EAAYC,YAAZ,EAA0BC,UAA1B,IAAwCH,KAA9C;AACA,UAAMI,KAAK,GAAG1E,cAAO2E,UAAP,CAAkBH,YAAlB,EAAgCV,QAAhC,EAAd;AACA,QAAIY,KAAK,IAAI,KAAK,EAAlB,EAAsB,MAAM,IAAI5E,KAAJ,CAAU,oDAAV,CAAN;AACtB,QAAI2E,UAAJ,EAAgBL,GAAG,CAACQ,IAAJ,CAAS7E,cAAc,CAACE,QAAf,CAAwByE,KAAxB,CAAT,EAAhB,KACKN,GAAG,CAACQ,IAAJ,CAAS7E,cAAc,CAACI,MAAf,CAAsBuE,KAAtB,CAAT;AACLP,QAAI,GAAGA,IAAI,CAACvC,KAAL,CAAW2C,SAAS,CAACM,MAArB,CAAP;AACD;;AACD,SAAOT,GAAP;AACD;;AAhBD3E","names":["Slip10Curve","exports","slip10CurveFromString","curveString","Ed25519","Secp256k1","Error","Slip10RawIndex","math_1","hardened","hardenedIndex","normal","normalIndex","isHardened","data","secp256k1","elliptic_1","ec","Slip10","derivePath","curve","seed","path","result","master","rawIndex","child","privkey","chainCode","i","hmac_1","sha_1","encoding_1","update","digest","il","slice","ir","isZero","isGteN","parentPrivkey","parentChainCode","payload","Uint8Array","toBytesBigEndian","serializedPoint","bn_js_1","childImpl","p","g","mul","encodeCompressed","returnChainCode","n","returnChildKeyAsNumber","add","mod","returnChildKey","from","toArray","newI","every","byte","keyAsNumber","gte","pathToString","reduce","current","component","componentString","toNumber","toString","stringToPath","input","startsWith","rest","out","Array","match","fullMatch","numberString","apostrophe","value","fromString","push","length"],"sourceRoot":"","sources":["../src/slip10.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}