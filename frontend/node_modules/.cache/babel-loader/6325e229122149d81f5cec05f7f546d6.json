{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { configVars } from \"../config/config\";\nimport { store } from \"../slices/store\";\nimport { setProcessing, setTransaction } from \"../slices/transactionSlice\";\nexport async function payWithMetamask(sender) {\n  const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  const signer = provider.getSigner();\n  store.dispatch(setProcessing(true));\n  const tx = {\n    from: sender,\n    to: configVars.devWallet,\n    value: ethers.utils.parseEther(String(configVars.pokerRegistrationFee)),\n    nonce: await provider.getTransactionCount(sender, \"latest\"),\n    gasLimit: ethers.utils.hexlify(200000),\n    gasPrice: ethers.utils.hexlify(await provider.getGasPrice())\n  };\n\n  try {\n    const transaction = await signer.sendTransaction(tx);\n    store.dispatch(setTransaction(transaction.hash));\n    store.dispatch(setProcessing(false));\n    return transaction.hash;\n  } catch (error) {\n    console.log(\"error\", error);\n    store.dispatch(setProcessing(false));\n    return null;\n  }\n}","map":{"version":3,"sources":["/home/vanka/dev/padlomoon/frontend/src/utils/transactions.ts"],"names":["ethers","configVars","store","setProcessing","setTransaction","payWithMetamask","sender","provider","providers","Web3Provider","window","ethereum","signer","getSigner","dispatch","tx","from","to","devWallet","value","utils","parseEther","String","pokerRegistrationFee","nonce","getTransactionCount","gasLimit","hexlify","gasPrice","getGasPrice","transaction","sendTransaction","hash","error","console","log"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,4BAA9C;AAEA,OAAO,eAAeC,eAAf,CAA+BC,MAA/B,EAAuE;AAC5E,QAAMC,QAAQ,GAAG,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAAjB;AACA,QAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf;AACAX,EAAAA,KAAK,CAACY,QAAN,CAAeX,aAAa,CAAC,IAAD,CAA5B;AAEA,QAAMY,EAAE,GAAG;AACTC,IAAAA,IAAI,EAAEV,MADG;AAETW,IAAAA,EAAE,EAAEhB,UAAU,CAACiB,SAFN;AAGTC,IAAAA,KAAK,EAAEnB,MAAM,CAACoB,KAAP,CAAaC,UAAb,CAAwBC,MAAM,CAACrB,UAAU,CAACsB,oBAAZ,CAA9B,CAHE;AAITC,IAAAA,KAAK,EAAE,MAAMjB,QAAQ,CAACkB,mBAAT,CAA6BnB,MAA7B,EAAqC,QAArC,CAJJ;AAKToB,IAAAA,QAAQ,EAAE1B,MAAM,CAACoB,KAAP,CAAaO,OAAb,CAAqB,MAArB,CALD;AAMTC,IAAAA,QAAQ,EAAE5B,MAAM,CAACoB,KAAP,CAAaO,OAAb,CAAqB,MAAMpB,QAAQ,CAACsB,WAAT,EAA3B;AAND,GAAX;;AASA,MAAI;AACF,UAAMC,WAAW,GAAG,MAAMlB,MAAM,CAACmB,eAAP,CAAuBhB,EAAvB,CAA1B;AACAb,IAAAA,KAAK,CAACY,QAAN,CAAeV,cAAc,CAAC0B,WAAW,CAACE,IAAb,CAA7B;AACA9B,IAAAA,KAAK,CAACY,QAAN,CAAeX,aAAa,CAAC,KAAD,CAA5B;AACA,WAAO2B,WAAW,CAACE,IAAnB;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACA/B,IAAAA,KAAK,CAACY,QAAN,CAAeX,aAAa,CAAC,KAAD,CAA5B;AACA,WAAO,IAAP;AACD;AACF","sourcesContent":["import { ethers } from \"ethers\";\nimport { configVars } from \"../config/config\";\nimport { store } from \"../slices/store\";\nimport { setProcessing, setTransaction } from \"../slices/transactionSlice\";\n\nexport async function payWithMetamask(sender: string): Promise<string | null> {\n  const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  const signer = provider.getSigner();\n  store.dispatch(setProcessing(true));\n\n  const tx = {\n    from: sender,\n    to: configVars.devWallet,\n    value: ethers.utils.parseEther(String(configVars.pokerRegistrationFee)),\n    nonce: await provider.getTransactionCount(sender, \"latest\"),\n    gasLimit: ethers.utils.hexlify(200000),\n    gasPrice: ethers.utils.hexlify(await provider.getGasPrice()),\n  };\n\n  try {\n    const transaction = await signer.sendTransaction(tx);\n    store.dispatch(setTransaction(transaction.hash));\n    store.dispatch(setProcessing(false));\n    return transaction.hash;\n  } catch (error) {\n    console.log(\"error\", error);\n    store.dispatch(setProcessing(false));\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}