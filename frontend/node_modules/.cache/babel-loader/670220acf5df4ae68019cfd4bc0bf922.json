{"ast":null,"code":"// wallet-connect.ts\nimport { ethers } from \"ethers\"; // npm install ethers\n// This is the SDK provided by Wallet Connect\n\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport * as config from \"../config/config\";\nimport * as utils from \"./utils\";\nimport { defaultWallet } from \"../slices/interfaces\"; // Main login flow for Crypto.com DeFi Wallet with Wallet Extension\n// The connector must be activated, then it exposes a provider\n// that is used by the ethers Web3Provider constructor.\n\nexport const connect = async () => {\n  try {\n    // Reset cache\n    localStorage.clear();\n    const provider = new WalletConnectProvider({\n      rpc: {\n        [config.configVars.rpcNetwork.chainId]: config.configVars.rpcNetwork.rpcUrl\n      },\n      // This chainId parameter is not mentioned\n      // in the WalletConnect documentation,\n      // But is necessary otherwise\n      // WalletConnect will connect to Ethereum mainnet\n      chainId: config.configVars.rpcNetwork.chainId\n    });\n    await provider.enable();\n    const ethersProvider = new ethers.providers.Web3Provider(provider);\n\n    if (!(provider.chainId === config.configVars.rpcNetwork.chainId)) {\n      window.alert(\"Switch your Wallet to blockchain network \" + config.configVars.rpcNetwork.chainName);\n      return defaultWallet;\n    } // Subscribe to events that reload the app\n\n\n    provider.on(\"accountsChanged\", utils.reloadApp);\n    provider.on(\"chainChanged\", utils.reloadApp);\n    provider.on(\"disconnect\", utils.reloadApp);\n    return { ...defaultWallet,\n      walletProviderName: \"walletconnect\",\n      address: (await ethersProvider.listAccounts())[0],\n      browserWeb3Provider: ethersProvider,\n      serverWeb3Provider: new ethers.providers.JsonRpcProvider(config.configVars.rpcNetwork.rpcUrl),\n      wcProvider: provider,\n      connected: true,\n      chainId: provider.chainId\n    };\n  } catch (e) {\n    window.alert(e);\n    return defaultWallet;\n  }\n};","map":{"version":3,"sources":["/home/vanka/dev/padlomoon/frontend/src/utils/walletConnect.ts"],"names":["ethers","WalletConnectProvider","config","utils","defaultWallet","connect","localStorage","clear","provider","rpc","configVars","rpcNetwork","chainId","rpcUrl","enable","ethersProvider","providers","Web3Provider","window","alert","chainName","on","reloadApp","walletProviderName","address","listAccounts","browserWeb3Provider","serverWeb3Provider","JsonRpcProvider","wcProvider","connected","e"],"mappings":"AAAA;AACA,SAASA,MAAT,QAAuB,QAAvB,C,CAAiC;AAEjC;;AACA,OAAOC,qBAAP,MAAkC,8BAAlC;AAEA,OAAO,KAAKC,MAAZ,MAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAAkBC,aAAlB,QAAuC,sBAAvC,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAG,YAA8B;AACnD,MAAI;AACF;AACAC,IAAAA,YAAY,CAACC,KAAb;AACA,UAAMC,QAAQ,GAAG,IAAIP,qBAAJ,CAA0B;AACzCQ,MAAAA,GAAG,EAAE;AACH,SAACP,MAAM,CAACQ,UAAP,CAAkBC,UAAlB,CAA6BC,OAA9B,GACEV,MAAM,CAACQ,UAAP,CAAkBC,UAAlB,CAA6BE;AAF5B,OADoC;AAKzC;AACA;AACA;AACA;AACAD,MAAAA,OAAO,EAAEV,MAAM,CAACQ,UAAP,CAAkBC,UAAlB,CAA6BC;AATG,KAA1B,CAAjB;AAWA,UAAMJ,QAAQ,CAACM,MAAT,EAAN;AACA,UAAMC,cAAc,GAAG,IAAIf,MAAM,CAACgB,SAAP,CAAiBC,YAArB,CAAkCT,QAAlC,CAAvB;;AACA,QAAI,EAAEA,QAAQ,CAACI,OAAT,KAAqBV,MAAM,CAACQ,UAAP,CAAkBC,UAAlB,CAA6BC,OAApD,CAAJ,EAAkE;AAChEM,MAAAA,MAAM,CAACC,KAAP,CACE,8CACEjB,MAAM,CAACQ,UAAP,CAAkBC,UAAlB,CAA6BS,SAFjC;AAIA,aAAOhB,aAAP;AACD,KAtBC,CAuBF;;;AACAI,IAAAA,QAAQ,CAACa,EAAT,CAAY,iBAAZ,EAA+BlB,KAAK,CAACmB,SAArC;AACAd,IAAAA,QAAQ,CAACa,EAAT,CAAY,cAAZ,EAA4BlB,KAAK,CAACmB,SAAlC;AACAd,IAAAA,QAAQ,CAACa,EAAT,CAAY,YAAZ,EAA0BlB,KAAK,CAACmB,SAAhC;AACA,WAAO,EACL,GAAGlB,aADE;AAELmB,MAAAA,kBAAkB,EAAE,eAFf;AAGLC,MAAAA,OAAO,EAAE,CAAC,MAAMT,cAAc,CAACU,YAAf,EAAP,EAAsC,CAAtC,CAHJ;AAILC,MAAAA,mBAAmB,EAAEX,cAJhB;AAKLY,MAAAA,kBAAkB,EAAE,IAAI3B,MAAM,CAACgB,SAAP,CAAiBY,eAArB,CAClB1B,MAAM,CAACQ,UAAP,CAAkBC,UAAlB,CAA6BE,MADX,CALf;AAQLgB,MAAAA,UAAU,EAAErB,QARP;AASLsB,MAAAA,SAAS,EAAE,IATN;AAULlB,MAAAA,OAAO,EAAEJ,QAAQ,CAACI;AAVb,KAAP;AAYD,GAvCD,CAuCE,OAAOmB,CAAP,EAAU;AACVb,IAAAA,MAAM,CAACC,KAAP,CAAaY,CAAb;AACA,WAAO3B,aAAP;AACD;AACF,CA5CM","sourcesContent":["// wallet-connect.ts\nimport { ethers } from \"ethers\"; // npm install ethers\n\n// This is the SDK provided by Wallet Connect\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\n\nimport * as config from \"../config/config\";\nimport * as utils from \"./utils\";\nimport { IWallet, defaultWallet } from \"../slices/interfaces\";\n\n// Main login flow for Crypto.com DeFi Wallet with Wallet Extension\n// The connector must be activated, then it exposes a provider\n// that is used by the ethers Web3Provider constructor.\nexport const connect = async (): Promise<IWallet> => {\n  try {\n    // Reset cache\n    localStorage.clear();\n    const provider = new WalletConnectProvider({\n      rpc: {\n        [config.configVars.rpcNetwork.chainId]:\n          config.configVars.rpcNetwork.rpcUrl,\n      },\n      // This chainId parameter is not mentioned\n      // in the WalletConnect documentation,\n      // But is necessary otherwise\n      // WalletConnect will connect to Ethereum mainnet\n      chainId: config.configVars.rpcNetwork.chainId,\n    });\n    await provider.enable();\n    const ethersProvider = new ethers.providers.Web3Provider(provider);\n    if (!(provider.chainId === config.configVars.rpcNetwork.chainId)) {\n      window.alert(\n        \"Switch your Wallet to blockchain network \" +\n          config.configVars.rpcNetwork.chainName\n      );\n      return defaultWallet;\n    }\n    // Subscribe to events that reload the app\n    provider.on(\"accountsChanged\", utils.reloadApp);\n    provider.on(\"chainChanged\", utils.reloadApp);\n    provider.on(\"disconnect\", utils.reloadApp);\n    return {\n      ...defaultWallet,\n      walletProviderName: \"walletconnect\",\n      address: (await ethersProvider.listAccounts())[0],\n      browserWeb3Provider: ethersProvider,\n      serverWeb3Provider: new ethers.providers.JsonRpcProvider(\n        config.configVars.rpcNetwork.rpcUrl\n      ),\n      wcProvider: provider,\n      connected: true,\n      chainId: provider.chainId,\n    };\n  } catch (e) {\n    window.alert(e);\n    return defaultWallet;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}