{"ast":null,"code":"import { ethers } from \"ethers\";\nimport * as config from \"../config/config\";\nimport PadloJson from \"../config/contracts/padloContract.json\";\nexport const delay = ms => new Promise(res => setTimeout(res, ms));\nexport const hexToInt = s => {\n  const bn = ethers.BigNumber.from(s);\n  return parseInt(bn.toString());\n};\nexport const reloadApp = () => {\n  window.location.reload();\n}; // Get the last block number\n\nexport const getLastBlockNumber = async ethersProvider => {\n  return ethersProvider.getBlockNumber();\n}; // Get the CRO balance of address\n\nexport const getCroBalance = async (serverWeb3Provider, address) => {\n  const balance = await (serverWeb3Provider === null || serverWeb3Provider === void 0 ? void 0 : serverWeb3Provider.getBalance(address)); // Balance is rounded at 2 decimals instead of 18, to simplify the UI\n\n  return ethers.BigNumber.from(balance).div(ethers.BigNumber.from(\"10000000000000000\")).toNumber() / 100;\n}; // Get the CTOK token balance of address\n// The CTOK is a ERC20 smart contract, its address is retrieved from\n// the config/config.ts file\n// and the ABI from config/contracts/MyERC20MintableByAnyone.json\n\nexport const getPadloBalance = async (serverWeb3Provider, address) => {\n  // Create ethers.Contract object using the smart contract's ABI\n  const contractAbi = PadloJson.abi;\n\n  if (!serverWeb3Provider) {\n    console.log(\"ServiceProvider not given\");\n    return 0;\n  }\n\n  const readContractInstance = new ethers.Contract(config.configVars.padlo.address, contractAbi, serverWeb3Provider);\n  const contractResponse = await readContractInstance[\"balanceOf\"](address); // Balance is rounded at 2 decimals instead of 18, to simplify UI\n\n  return ethers.BigNumber.from(contractResponse).div(ethers.BigNumber.from(\"10000000000\")).toNumber() / 100;\n};\nexport function wait(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","map":{"version":3,"sources":["/home/vanka/dev/padlomoon/frontend/src/utils/utils.ts"],"names":["ethers","config","PadloJson","delay","ms","Promise","res","setTimeout","hexToInt","s","bn","BigNumber","from","parseInt","toString","reloadApp","window","location","reload","getLastBlockNumber","ethersProvider","getBlockNumber","getCroBalance","serverWeb3Provider","address","balance","getBalance","div","toNumber","getPadloBalance","contractAbi","abi","console","log","readContractInstance","Contract","configVars","padlo","contractResponse","wait","resolve"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,OAAO,KAAKC,MAAZ,MAAwB,kBAAxB;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AAEA,OAAO,MAAMC,KAAK,GAAIC,EAAD,IAAgB,IAAIC,OAAJ,CAAaC,GAAD,IAASC,UAAU,CAACD,GAAD,EAAMF,EAAN,CAA/B,CAA9B;AAEP,OAAO,MAAMI,QAAQ,GAAIC,CAAD,IAAe;AACrC,QAAMC,EAAE,GAAGV,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsBH,CAAtB,CAAX;AACA,SAAOI,QAAQ,CAACH,EAAE,CAACI,QAAH,EAAD,CAAf;AACD,CAHM;AAKP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7BC,EAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,cAAP,IAA6C;AAC7E,SAAOA,cAAc,CAACC,cAAf,EAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMC,aAAa,GAAG,OAC3BC,kBAD2B,EAE3BC,OAF2B,KAGP;AACpB,QAAMC,OAAO,GAAG,OAAMF,kBAAN,aAAMA,kBAAN,uBAAMA,kBAAkB,CAAEG,UAApB,CAA+BF,OAA/B,CAAN,CAAhB,CADoB,CAEpB;;AACA,SACExB,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsBa,OAAtB,EACGE,GADH,CACO3B,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB,mBAAtB,CADP,EAEGgB,QAFH,KAEgB,GAHlB;AAKD,CAXM,C,CAaP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,OAC7BN,kBAD6B,EAE7BC,OAF6B,KAGT;AACpB;AACA,QAAMM,WAAW,GAAG5B,SAAS,CAAC6B,GAA9B;;AACA,MAAI,CAACR,kBAAL,EAAyB;AACvBS,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,WAAO,CAAP;AACD;;AACD,QAAMC,oBAAoB,GAAG,IAAIlC,MAAM,CAACmC,QAAX,CAC3BlC,MAAM,CAACmC,UAAP,CAAkBC,KAAlB,CAAwBb,OADG,EAE3BM,WAF2B,EAG3BP,kBAH2B,CAA7B;AAKA,QAAMe,gBAAgB,GAAG,MAAMJ,oBAAoB,CAAC,WAAD,CAApB,CAAkCV,OAAlC,CAA/B,CAZoB,CAapB;;AACA,SACExB,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB0B,gBAAtB,EACGX,GADH,CACO3B,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB,aAAtB,CADP,EAEGgB,QAFH,KAEgB,GAHlB;AAKD,CAtBM;AAwBP,OAAO,SAASW,IAAT,CAAcnC,EAAd,EAA0B;AAC/B,SAAO,IAAIC,OAAJ,CAAamC,OAAD,IAAajC,UAAU,CAACiC,OAAD,EAAUpC,EAAV,CAAnC,CAAP;AACD","sourcesContent":["import { ethers } from \"ethers\";\n\nimport * as config from \"../config/config\";\nimport PadloJson from \"../config/contracts/padloContract.json\";\n\nexport const delay = (ms: number) => new Promise((res) => setTimeout(res, ms));\n\nexport const hexToInt = (s: string) => {\n  const bn = ethers.BigNumber.from(s);\n  return parseInt(bn.toString());\n};\n\nexport const reloadApp = () => {\n  window.location.reload();\n};\n\n// Get the last block number\nexport const getLastBlockNumber = async (ethersProvider: any): Promise<any> => {\n  return ethersProvider.getBlockNumber();\n};\n\n// Get the CRO balance of address\nexport const getCroBalance = async (\n  serverWeb3Provider: ethers.providers.JsonRpcProvider | null,\n  address: string\n): Promise<number> => {\n  const balance = await serverWeb3Provider?.getBalance(address);\n  // Balance is rounded at 2 decimals instead of 18, to simplify the UI\n  return (\n    ethers.BigNumber.from(balance)\n      .div(ethers.BigNumber.from(\"10000000000000000\"))\n      .toNumber() / 100\n  );\n};\n\n// Get the CTOK token balance of address\n// The CTOK is a ERC20 smart contract, its address is retrieved from\n// the config/config.ts file\n// and the ABI from config/contracts/MyERC20MintableByAnyone.json\nexport const getPadloBalance = async (\n  serverWeb3Provider: ethers.providers.JsonRpcProvider | null,\n  address: string\n): Promise<number> => {\n  // Create ethers.Contract object using the smart contract's ABI\n  const contractAbi = PadloJson.abi;\n  if (!serverWeb3Provider) {\n    console.log(\"ServiceProvider not given\");\n    return 0;\n  }\n  const readContractInstance = new ethers.Contract(\n    config.configVars.padlo.address,\n    contractAbi,\n    serverWeb3Provider\n  );\n  const contractResponse = await readContractInstance[\"balanceOf\"](address);\n  // Balance is rounded at 2 decimals instead of 18, to simplify UI\n  return (\n    ethers.BigNumber.from(contractResponse)\n      .div(ethers.BigNumber.from(\"10000000000\"))\n      .toNumber() / 100\n  );\n};\n\nexport function wait(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"]},"metadata":{},"sourceType":"module"}