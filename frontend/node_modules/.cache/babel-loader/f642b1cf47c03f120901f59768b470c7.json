{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.firstEvent = exports.toListPromise = exports.fromListPromise = void 0;\n\nconst xstream_1 = require(\"xstream\");\n/**\n * Emits one event for each list element as soon as the promise resolves\n */\n\n\nfunction fromListPromise(promise) {\n  const producer = {\n    start: listener => {\n      // the code in `start` runs as soon as anyone listens to the stream\n      promise.then(iterable => {\n        for (const element of iterable) {\n          listener.next(element);\n        }\n\n        listener.complete();\n      }).catch(error => listener.error(error));\n    },\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    stop: () => {}\n  };\n  return xstream_1.Stream.create(producer);\n}\n\nexports.fromListPromise = fromListPromise;\n/**\n * Listens to stream and collects events. When `count` events are collected,\n * the promise resolves with an array of events.\n *\n * Rejects if stream completes before `count` events are collected.\n */\n\nasync function toListPromise(stream, count) {\n  return new Promise((resolve, reject) => {\n    if (count === 0) {\n      resolve([]);\n      return;\n    }\n\n    const events = new Array(); // take() unsubscribes from source stream automatically\n\n    stream.take(count).subscribe({\n      next: event => {\n        events.push(event);\n\n        if (events.length === count) {\n          resolve(events);\n        }\n      },\n      complete: () => {\n        reject(`Stream completed before all events could be collected. ` + `Collected ${events.length}, expected ${count}`);\n      },\n      error: error => reject(error)\n    });\n  });\n}\n\nexports.toListPromise = toListPromise;\n/**\n * Listens to stream, collects one event and revolves.\n *\n * Rejects if stream completes before one event was fired.\n */\n\nasync function firstEvent(stream) {\n  return (await toListPromise(stream, 1))[0];\n}\n\nexports.firstEvent = firstEvent;","map":{"version":3,"mappings":";;;;;;;AAAA;AAEA;;;;;AAGA,SAAgBA,eAAhB,CAAmCC,OAAnC,EAAgE;AAC9D,QAAMC,QAAQ,GAAgB;AAC5BC,SAAK,EAAGC,QAAD,IAAa;AAClB;AACAH,aAAO,CACJI,IADH,CACSC,QAAD,IAAa;AACjB,aAAK,MAAMC,OAAX,IAAsBD,QAAtB,EAAgC;AAC9BF,kBAAQ,CAACI,IAAT,CAAcD,OAAd;AACD;;AACDH,gBAAQ,CAACK,QAAT;AACD,OANH,EAOGC,KAPH,CAOUC,KAAD,IAAWP,QAAQ,CAACO,KAAT,CAAeA,KAAf,CAPpB;AAQD,KAX2B;AAY5B;AACAC,QAAI,EAAE,MAAK,CAAG;AAbc,GAA9B;AAgBA,SAAOC,iBAAOC,MAAP,CAAcZ,QAAd,CAAP;AACD;;AAlBDa;AAoBA;;;;;;;AAMO,eAAeC,aAAf,CAAgCC,MAAhC,EAAmDC,KAAnD,EAAgE;AACrE,SAAO,IAAIC,OAAJ,CAA0B,CAACC,OAAD,EAAUC,MAAV,KAAoB;AACnD,QAAIH,KAAK,KAAK,CAAd,EAAiB;AACfE,aAAO,CAAC,EAAD,CAAP;AACA;AACD;;AAED,UAAME,MAAM,GAAG,IAAIC,KAAJ,EAAf,CANmD,CAOnD;;AACAN,UAAM,CAACO,IAAP,CAAYN,KAAZ,EAAmBO,SAAnB,CAA6B;AAC3BjB,UAAI,EAAGkB,KAAD,IAAU;AACdJ,cAAM,CAACK,IAAP,CAAYD,KAAZ;;AAEA,YAAIJ,MAAM,CAACM,MAAP,KAAkBV,KAAtB,EAA6B;AAC3BE,iBAAO,CAACE,MAAD,CAAP;AACD;AACF,OAP0B;AAQ3Bb,cAAQ,EAAE,MAAK;AACbY,cAAM,CACJ,4DACE,aAAaC,MAAM,CAACM,MAAM,cAAcV,KAAK,EAF3C,CAAN;AAID,OAb0B;AAc3BP,WAAK,EAAGA,KAAD,IAAWU,MAAM,CAACV,KAAD;AAdG,KAA7B;AAgBD,GAxBM,CAAP;AAyBD;;AA1BDI;AA4BA;;;;;;AAKO,eAAec,UAAf,CAA6BZ,MAA7B,EAA8C;AACnD,SAAO,CAAC,MAAMD,aAAa,CAACC,MAAD,EAAS,CAAT,CAApB,EAAiC,CAAjC,CAAP;AACD;;AAFDF","names":["fromListPromise","promise","producer","start","listener","then","iterable","element","next","complete","catch","error","stop","xstream_1","create","exports","toListPromise","stream","count","Promise","resolve","reject","events","Array","take","subscribe","event","push","length","firstEvent"],"sourceRoot":"","sources":["../src/promise.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}