{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountFromAny = void 0;\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst auth_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/auth\");\n\nconst vesting_1 = require(\"cosmjs-types/cosmos/vesting/v1beta1/vesting\");\n\nfunction uint64FromProto(input) {\n  return math_1.Uint64.fromString(input.toString());\n}\n\nfunction accountFromBaseAccount(input) {\n  const {\n    address,\n    pubKey,\n    accountNumber,\n    sequence\n  } = input;\n  const pubkey = proto_signing_1.decodePubkey(pubKey);\n  return {\n    address: address,\n    pubkey: pubkey,\n    accountNumber: uint64FromProto(accountNumber).toNumber(),\n    sequence: uint64FromProto(sequence).toNumber()\n  };\n}\n/**\n * Takes an `Any` encoded account from the chain and extracts some common\n * `Account` information from it. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\n\n\nfunction accountFromAny(input) {\n  var _a, _b, _c, _d, _e, _f, _g;\n\n  const {\n    typeUrl,\n    value\n  } = input;\n\n  switch (typeUrl) {\n    // auth\n    case \"/cosmos.auth.v1beta1.BaseAccount\":\n      return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n\n    case \"/cosmos.auth.v1beta1.ModuleAccount\":\n      {\n        const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    // vesting\n\n    case \"/cosmos.vesting.v1beta1.BaseVestingAccount\":\n      {\n        const baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\":\n      {\n        const baseAccount = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\":\n      {\n        const baseAccount = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\":\n      {\n        const baseAccount = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;\n        utils_1.assert(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n\n    default:\n      throw new Error(`Unsupported type: '${typeUrl}'`);\n  }\n}\n\nexports.accountFromAny = accountFromAny;","map":{"version":3,"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAiBA,SAASA,eAAT,CAAyBC,KAAzB,EAA6C;AAC3C,SAAOC,cAAOC,UAAP,CAAkBF,KAAK,CAACG,QAAN,EAAlB,CAAP;AACD;;AAED,SAASC,sBAAT,CAAgCJ,KAAhC,EAAkD;AAChD,QAAM;AAAEK,WAAF;AAAWC,UAAX;AAAmBC,iBAAnB;AAAkCC;AAAlC,MAA+CR,KAArD;AACA,QAAMS,MAAM,GAAGC,6BAAaJ,MAAb,CAAf;AACA,SAAO;AACLD,WAAO,EAAEA,OADJ;AAELI,UAAM,EAAEA,MAFH;AAGLF,iBAAa,EAAER,eAAe,CAACQ,aAAD,CAAf,CAA+BI,QAA/B,EAHV;AAILH,YAAQ,EAAET,eAAe,CAACS,QAAD,CAAf,CAA0BG,QAA1B;AAJL,GAAP;AAMD;AAED;;;;;;;;AAMA,SAAgBC,cAAhB,CAA+BZ,KAA/B,EAAyC;;;AACvC,QAAM;AAAEa,WAAF;AAAWC;AAAX,MAAqBd,KAA3B;;AAEA,UAAQa,OAAR;AACE;AAEA,SAAK,kCAAL;AACE,aAAOT,sBAAsB,CAACW,mBAAYC,MAAZ,CAAmBF,KAAnB,CAAD,CAA7B;;AACF,SAAK,oCAAL;AAA2C;AACzC,cAAMG,WAAW,GAAGF,qBAAcC,MAAd,CAAqBF,KAArB,EAA4BG,WAAhD;AACAC,uBAAOD,WAAP;AACA,eAAOb,sBAAsB,CAACa,WAAD,CAA7B;AACD;AAED;;AAEA,SAAK,4CAAL;AAAmD;AACjD,cAAMA,WAAW,GAAG,mCAAmBD,MAAnB,CAA0BF,KAA1B,OAAgC,IAAhC,IAAgCK,aAAhC,GAAgC,MAAhC,GAAgCA,GAAEF,WAAtD;AACAC,uBAAOD,WAAP;AACA,eAAOb,sBAAsB,CAACa,WAAD,CAA7B;AACD;;AACD,SAAK,kDAAL;AAAyD;AACvD,cAAMA,WAAW,GAAG,+CAAyBD,MAAzB,CAAgCF,KAAhC,OAAsC,IAAtC,IAAsCM,aAAtC,GAAsC,MAAtC,GAAsCA,GAAEC,kBAAxC,MAA0D,IAA1D,IAA0DC,aAA1D,GAA0D,MAA1D,GAA0DA,GAAEL,WAAhF;AACAC,uBAAOD,WAAP;AACA,eAAOb,sBAAsB,CAACa,WAAD,CAA7B;AACD;;AACD,SAAK,+CAAL;AAAsD;AACpD,cAAMA,WAAW,GAAG,4CAAsBD,MAAtB,CAA6BF,KAA7B,OAAmC,IAAnC,IAAmCS,aAAnC,GAAmC,MAAnC,GAAmCA,GAAEF,kBAArC,MAAuD,IAAvD,IAAuDG,aAAvD,GAAuD,MAAvD,GAAuDA,GAAEP,WAA7E;AACAC,uBAAOD,WAAP;AACA,eAAOb,sBAAsB,CAACa,WAAD,CAA7B;AACD;;AACD,SAAK,gDAAL;AAAuD;AACrD,cAAMA,WAAW,GAAG,6CAAuBD,MAAvB,CAA8BF,KAA9B,OAAoC,IAApC,IAAoCW,aAApC,GAAoC,MAApC,GAAoCA,GAAEJ,kBAAtC,MAAwD,IAAxD,IAAwDK,aAAxD,GAAwD,MAAxD,GAAwDA,GAAET,WAA9E;AACAC,uBAAOD,WAAP;AACA,eAAOb,sBAAsB,CAACa,WAAD,CAA7B;AACD;;AAED;AACE,YAAM,IAAIU,KAAJ,CAAU,sBAAsBd,OAAO,GAAvC,CAAN;AAnCJ;AAqCD;;AAxCDe","names":["uint64FromProto","input","math_1","fromString","toString","accountFromBaseAccount","address","pubKey","accountNumber","sequence","pubkey","proto_signing_1","toNumber","accountFromAny","typeUrl","value","auth_1","decode","baseAccount","utils_1","_a","_b","baseVestingAccount","_c","_d","_e","_f","_g","Error","exports"],"sourceRoot":"","sources":["../src/accounts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}