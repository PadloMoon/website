{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromHex = exports.toHex = void 0;\n\nfunction toHex(data) {\n  let out = \"\";\n\n  for (const byte of data) {\n    out += (\"0\" + byte.toString(16)).slice(-2);\n  }\n\n  return out;\n}\n\nexports.toHex = toHex;\n\nfunction fromHex(hexstring) {\n  if (hexstring.length % 2 !== 0) {\n    throw new Error(\"hex string length must be a multiple of 2\");\n  }\n\n  const listOfInts = [];\n\n  for (let i = 0; i < hexstring.length; i += 2) {\n    const hexByteAsString = hexstring.substr(i, 2);\n\n    if (!hexByteAsString.match(/[0-9a-f]{2}/i)) {\n      throw new Error(\"hex string contains invalid characters\");\n    }\n\n    listOfInts.push(parseInt(hexByteAsString, 16));\n  }\n\n  return new Uint8Array(listOfInts);\n}\n\nexports.fromHex = fromHex;","map":{"version":3,"mappings":";;;;;;;AAAA,SAAgBA,KAAhB,CAAsBC,IAAtB,EAAsC;AACpC,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,MAAMC,IAAX,IAAmBF,IAAnB,EAAyB;AACvBC,OAAG,IAAI,CAAC,MAAMC,IAAI,CAACC,QAAL,CAAc,EAAd,CAAP,EAA0BC,KAA1B,CAAgC,CAAC,CAAjC,CAAP;AACD;;AACD,SAAOH,GAAP;AACD;;AANDI;;AAQA,SAAgBC,OAAhB,CAAwBC,SAAxB,EAAyC;AACvC,MAAIA,SAAS,CAACC,MAAV,GAAmB,CAAnB,KAAyB,CAA7B,EAAgC;AAC9B,UAAM,IAAIC,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,QAAMC,UAAU,GAAa,EAA7B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACC,MAA9B,EAAsCG,CAAC,IAAI,CAA3C,EAA8C;AAC5C,UAAMC,eAAe,GAAGL,SAAS,CAACM,MAAV,CAAiBF,CAAjB,EAAoB,CAApB,CAAxB;;AACA,QAAI,CAACC,eAAe,CAACE,KAAhB,CAAsB,cAAtB,CAAL,EAA4C;AAC1C,YAAM,IAAIL,KAAJ,CAAU,wCAAV,CAAN;AACD;;AACDC,cAAU,CAACK,IAAX,CAAgBC,QAAQ,CAACJ,eAAD,EAAkB,EAAlB,CAAxB;AACD;;AACD,SAAO,IAAIK,UAAJ,CAAeP,UAAf,CAAP;AACD;;AAdDL","names":["toHex","data","out","byte","toString","slice","exports","fromHex","hexstring","length","Error","listOfInts","i","hexByteAsString","substr","match","push","parseInt","Uint8Array"],"sourceRoot":"","sources":["../src/hex.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}