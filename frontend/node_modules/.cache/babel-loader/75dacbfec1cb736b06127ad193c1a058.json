{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Uint64 = exports.Uint53 = exports.Int53 = exports.Uint32 = void 0;\n/* eslint-disable no-bitwise */\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst uint64MaxValue = new bn_js_1.default(\"18446744073709551615\", 10, \"be\");\n\nclass Uint32 {\n  constructor(input) {\n    if (Number.isNaN(input)) {\n      throw new Error(\"Input is not a number\");\n    }\n\n    if (!Number.isInteger(input)) {\n      throw new Error(\"Input is not an integer\");\n    }\n\n    if (input < 0 || input > 4294967295) {\n      throw new Error(\"Input not in uint32 range: \" + input.toString());\n    }\n\n    this.data = input;\n  }\n  /** @deprecated use Uint32.fromBytes */\n\n\n  static fromBigEndianBytes(bytes) {\n    return Uint32.fromBytes(bytes);\n  }\n  /**\n   * Creates a Uint32 from a fixed length byte array.\n   *\n   * @param bytes a list of exactly 4 bytes\n   * @param endianess defaults to big endian\n   */\n\n\n  static fromBytes(bytes) {\n    let endianess = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"be\";\n\n    if (bytes.length !== 4) {\n      throw new Error(\"Invalid input length. Expected 4 bytes.\");\n    }\n\n    for (let i = 0; i < bytes.length; ++i) {\n      if (!Number.isInteger(bytes[i]) || bytes[i] > 255 || bytes[i] < 0) {\n        throw new Error(\"Invalid value in byte. Found: \" + bytes[i]);\n      }\n    }\n\n    const beBytes = endianess === \"be\" ? bytes : Array.from(bytes).reverse(); // Use mulitiplication instead of shifting since bitwise operators are defined\n    // on SIGNED int32 in JavaScript and we don't want to risk surprises\n\n    return new Uint32(beBytes[0] * 2 ** 24 + beBytes[1] * 2 ** 16 + beBytes[2] * 2 ** 8 + beBytes[3]);\n  }\n\n  static fromString(str) {\n    if (!str.match(/^[0-9]+$/)) {\n      throw new Error(\"Invalid string format\");\n    }\n\n    return new Uint32(Number.parseInt(str, 10));\n  }\n\n  toBytesBigEndian() {\n    // Use division instead of shifting since bitwise operators are defined\n    // on SIGNED int32 in JavaScript and we don't want to risk surprises\n    return new Uint8Array([Math.floor(this.data / 2 ** 24) & 0xff, Math.floor(this.data / 2 ** 16) & 0xff, Math.floor(this.data / 2 ** 8) & 0xff, Math.floor(this.data / 2 ** 0) & 0xff]);\n  }\n\n  toBytesLittleEndian() {\n    // Use division instead of shifting since bitwise operators are defined\n    // on SIGNED int32 in JavaScript and we don't want to risk surprises\n    return new Uint8Array([Math.floor(this.data / 2 ** 0) & 0xff, Math.floor(this.data / 2 ** 8) & 0xff, Math.floor(this.data / 2 ** 16) & 0xff, Math.floor(this.data / 2 ** 24) & 0xff]);\n  }\n\n  toNumber() {\n    return this.data;\n  }\n\n  toString() {\n    return this.data.toString();\n  }\n\n}\n\nexports.Uint32 = Uint32;\n\nclass Int53 {\n  constructor(input) {\n    if (Number.isNaN(input)) {\n      throw new Error(\"Input is not a number\");\n    }\n\n    if (!Number.isInteger(input)) {\n      throw new Error(\"Input is not an integer\");\n    }\n\n    if (input < Number.MIN_SAFE_INTEGER || input > Number.MAX_SAFE_INTEGER) {\n      throw new Error(\"Input not in int53 range: \" + input.toString());\n    }\n\n    this.data = input;\n  }\n\n  static fromString(str) {\n    if (!str.match(/^-?[0-9]+$/)) {\n      throw new Error(\"Invalid string format\");\n    }\n\n    return new Int53(Number.parseInt(str, 10));\n  }\n\n  toNumber() {\n    return this.data;\n  }\n\n  toString() {\n    return this.data.toString();\n  }\n\n}\n\nexports.Int53 = Int53;\n\nclass Uint53 {\n  constructor(input) {\n    const signed = new Int53(input);\n\n    if (signed.toNumber() < 0) {\n      throw new Error(\"Input is negative\");\n    }\n\n    this.data = signed;\n  }\n\n  static fromString(str) {\n    const signed = Int53.fromString(str);\n    return new Uint53(signed.toNumber());\n  }\n\n  toNumber() {\n    return this.data.toNumber();\n  }\n\n  toString() {\n    return this.data.toString();\n  }\n\n}\n\nexports.Uint53 = Uint53;\n\nclass Uint64 {\n  constructor(data) {\n    if (data.isNeg()) {\n      throw new Error(\"Input is negative\");\n    }\n\n    if (data.gt(uint64MaxValue)) {\n      throw new Error(\"Input exceeds uint64 range\");\n    }\n\n    this.data = data;\n  }\n  /** @deprecated use Uint64.fromBytes */\n\n\n  static fromBytesBigEndian(bytes) {\n    return Uint64.fromBytes(bytes);\n  }\n  /**\n   * Creates a Uint64 from a fixed length byte array.\n   *\n   * @param bytes a list of exactly 8 bytes\n   * @param endianess defaults to big endian\n   */\n\n\n  static fromBytes(bytes) {\n    let endianess = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"be\";\n\n    if (bytes.length !== 8) {\n      throw new Error(\"Invalid input length. Expected 8 bytes.\");\n    }\n\n    for (let i = 0; i < bytes.length; ++i) {\n      if (!Number.isInteger(bytes[i]) || bytes[i] > 255 || bytes[i] < 0) {\n        throw new Error(\"Invalid value in byte. Found: \" + bytes[i]);\n      }\n    }\n\n    const beBytes = endianess === \"be\" ? Array.from(bytes) : Array.from(bytes).reverse();\n    return new Uint64(new bn_js_1.default(beBytes));\n  }\n\n  static fromString(str) {\n    if (!str.match(/^[0-9]+$/)) {\n      throw new Error(\"Invalid string format\");\n    }\n\n    return new Uint64(new bn_js_1.default(str, 10, \"be\"));\n  }\n\n  static fromNumber(input) {\n    if (Number.isNaN(input)) {\n      throw new Error(\"Input is not a number\");\n    }\n\n    if (!Number.isInteger(input)) {\n      throw new Error(\"Input is not an integer\");\n    }\n\n    let bigint;\n\n    try {\n      bigint = new bn_js_1.default(input);\n    } catch (_a) {\n      throw new Error(\"Input is not a safe integer\");\n    }\n\n    return new Uint64(bigint);\n  }\n\n  toBytesBigEndian() {\n    return Uint8Array.from(this.data.toArray(\"be\", 8));\n  }\n\n  toBytesLittleEndian() {\n    return Uint8Array.from(this.data.toArray(\"le\", 8));\n  }\n\n  toString() {\n    return this.data.toString(10);\n  }\n\n  toNumber() {\n    return this.data.toNumber();\n  }\n\n}\n\nexports.Uint64 = Uint64; // Assign classes to unused variables in order to verify static interface conformance at compile time.\n// Workaround for https://github.com/microsoft/TypeScript/issues/33892\n\nconst _int53Class = Int53;\nconst _uint53Class = Uint53;\nconst _uint32Class = Uint32;\nconst _uint64Class = Uint64;","map":{"version":3,"mappings":"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","names":["uint64MaxValue","bn_js_1","Uint32","constructor","input","Number","isNaN","Error","isInteger","toString","data","fromBigEndianBytes","bytes","fromBytes","endianess","length","i","beBytes","Array","from","reverse","fromString","str","match","parseInt","toBytesBigEndian","Uint8Array","Math","floor","toBytesLittleEndian","toNumber","exports","Int53","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","Uint53","signed","Uint64","isNeg","gt","fromBytesBigEndian","fromNumber","bigint","toArray","_int53Class","_uint53Class","_uint32Class","_uint64Class"],"sourceRoot":"","sources":["../src/integers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}