{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findAttribute = exports.parseRawLog = exports.parseLogs = exports.parseLog = exports.parseEvent = exports.parseAttribute = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nfunction parseAttribute(input) {\n  if (!utils_1.isNonNullObject(input)) throw new Error(\"Attribute must be a non-null object\");\n  const {\n    key,\n    value\n  } = input;\n  if (typeof key !== \"string\" || !key) throw new Error(\"Attribute's key must be a non-empty string\");\n\n  if (typeof value !== \"string\" && typeof value !== \"undefined\") {\n    throw new Error(\"Attribute's value must be a string or unset\");\n  }\n\n  return {\n    key: key,\n    value: value || \"\"\n  };\n}\n\nexports.parseAttribute = parseAttribute;\n\nfunction parseEvent(input) {\n  if (!utils_1.isNonNullObject(input)) throw new Error(\"Event must be a non-null object\");\n  const {\n    type,\n    attributes\n  } = input;\n\n  if (typeof type !== \"string\" || type === \"\") {\n    throw new Error(`Event type must be a non-empty string`);\n  }\n\n  if (!Array.isArray(attributes)) throw new Error(\"Event's attributes must be an array\");\n  return {\n    type: type,\n    attributes: attributes.map(parseAttribute)\n  };\n}\n\nexports.parseEvent = parseEvent;\n\nfunction parseLog(input) {\n  if (!utils_1.isNonNullObject(input)) throw new Error(\"Log must be a non-null object\");\n  const {\n    msg_index,\n    log,\n    events\n  } = input;\n  if (typeof msg_index !== \"number\") throw new Error(\"Log's msg_index must be a number\");\n  if (typeof log !== \"string\") throw new Error(\"Log's log must be a string\");\n  if (!Array.isArray(events)) throw new Error(\"Log's events must be an array\");\n  return {\n    msg_index: msg_index,\n    log: log,\n    events: events.map(parseEvent)\n  };\n}\n\nexports.parseLog = parseLog;\n\nfunction parseLogs(input) {\n  if (!Array.isArray(input)) throw new Error(\"Logs must be an array\");\n  return input.map(parseLog);\n}\n\nexports.parseLogs = parseLogs;\n\nfunction parseRawLog() {\n  let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"[]\";\n  const logsToParse = JSON.parse(input).map((_ref, i) => {\n    let {\n      events\n    } = _ref;\n    return {\n      msg_index: i,\n      events,\n      log: \"\"\n    };\n  });\n  return parseLogs(logsToParse);\n}\n\nexports.parseRawLog = parseRawLog;\n/**\n * Searches in logs for the first event of the given event type and in that event\n * for the first first attribute with the given attribute key.\n *\n * Throws if the attribute was not found.\n */\n\nfunction findAttribute(logs, eventType, attrKey) {\n  var _a;\n\n  const firstLogs = logs.find(() => true);\n  const out = (_a = firstLogs === null || firstLogs === void 0 ? void 0 : firstLogs.events.find(event => event.type === eventType)) === null || _a === void 0 ? void 0 : _a.attributes.find(attr => attr.key === attrKey);\n\n  if (!out) {\n    throw new Error(`Could not find attribute '${attrKey}' in first event of type '${eventType}' in first log.`);\n  }\n\n  return out;\n}\n\nexports.findAttribute = findAttribute;","map":{"version":3,"mappings":"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","names":["parseAttribute","input","utils_1","Error","key","value","exports","parseEvent","type","attributes","Array","isArray","map","parseLog","msg_index","log","events","parseLogs","parseRawLog","logsToParse","JSON","parse","i","findAttribute","logs","eventType","attrKey","firstLogs","find","out","event","_a","attr"],"sourceRoot":"","sources":["../src/logs.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}