{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registry = exports.isTxBodyEncodeObject = exports.isPbjsGeneratedType = exports.isTsProtoGeneratedType = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst tx_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/tx\");\n\nconst coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\n\nconst tx_2 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nconst any_1 = require(\"cosmjs-types/google/protobuf/any\");\n\nfunction isTsProtoGeneratedType(type) {\n  return typeof type.fromPartial === \"function\";\n}\n\nexports.isTsProtoGeneratedType = isTsProtoGeneratedType;\n\nfunction isPbjsGeneratedType(type) {\n  return !isTsProtoGeneratedType(type);\n}\n\nexports.isPbjsGeneratedType = isPbjsGeneratedType;\nconst defaultTypeUrls = {\n  cosmosCoin: \"/cosmos.base.v1beta1.Coin\",\n  cosmosMsgSend: \"/cosmos.bank.v1beta1.MsgSend\",\n  cosmosTxBody: \"/cosmos.tx.v1beta1.TxBody\",\n  googleAny: \"/google.protobuf.Any\"\n};\n\nfunction isTxBodyEncodeObject(encodeObject) {\n  return encodeObject.typeUrl === \"/cosmos.tx.v1beta1.TxBody\";\n}\n\nexports.isTxBodyEncodeObject = isTxBodyEncodeObject;\n\nclass Registry {\n  constructor() {\n    let customTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    const {\n      cosmosCoin,\n      cosmosMsgSend\n    } = defaultTypeUrls;\n    this.types = new Map([[cosmosCoin, coin_1.Coin], [cosmosMsgSend, tx_1.MsgSend], ...customTypes]);\n  }\n\n  register(typeUrl, type) {\n    this.types.set(typeUrl, type);\n  }\n  /**\n   * Looks up a type that was previously added to the registry.\n   *\n   * The generator information (ts-proto or pbjs) gets lost along the way.\n   * If you need to work with the result type in TypeScript, you can use:\n   *\n   * ```\n   * import { assert } from \"@cosmjs/utils\";\n   *\n   * const Coin = registry.lookupType(\"/cosmos.base.v1beta1.Coin\");\n   * assert(Coin); // Ensures not unset\n   * assert(isTsProtoGeneratedType(Coin)); // Ensures this is the type we expect\n   *\n   * // Coin is typed TsProtoGeneratedType now.\n   * ```\n   */\n\n\n  lookupType(typeUrl) {\n    return this.types.get(typeUrl);\n  }\n\n  lookupTypeWithError(typeUrl) {\n    const type = this.lookupType(typeUrl);\n\n    if (!type) {\n      throw new Error(`Unregistered type url: ${typeUrl}`);\n    }\n\n    return type;\n  }\n\n  encode(encodeObject) {\n    const {\n      value,\n      typeUrl\n    } = encodeObject;\n\n    if (isTxBodyEncodeObject(encodeObject)) {\n      return this.encodeTxBody(value);\n    }\n\n    const type = this.lookupTypeWithError(typeUrl);\n    const instance = isTsProtoGeneratedType(type) ? type.fromPartial(value) : type.create(value);\n    return type.encode(instance).finish();\n  }\n\n  encodeTxBody(txBodyFields) {\n    const wrappedMessages = txBodyFields.messages.map(message => {\n      const messageBytes = this.encode(message);\n      return any_1.Any.fromPartial({\n        typeUrl: message.typeUrl,\n        value: messageBytes\n      });\n    });\n    const txBody = tx_2.TxBody.fromPartial(Object.assign(Object.assign({}, txBodyFields), {\n      messages: wrappedMessages\n    }));\n    return tx_2.TxBody.encode(txBody).finish();\n  }\n\n  decode(_ref) {\n    let {\n      typeUrl,\n      value\n    } = _ref;\n\n    if (typeUrl === defaultTypeUrls.cosmosTxBody) {\n      return this.decodeTxBody(value);\n    }\n\n    const type = this.lookupTypeWithError(typeUrl);\n    const decoded = type.decode(value);\n    Object.entries(decoded).forEach(_ref2 => {\n      let [key, val] = _ref2;\n\n      if (typeof Buffer !== \"undefined\" && typeof Buffer.isBuffer !== \"undefined\" && Buffer.isBuffer(val)) {\n        decoded[key] = Uint8Array.from(val);\n      }\n    });\n    return decoded;\n  }\n\n  decodeTxBody(txBody) {\n    const decodedTxBody = tx_2.TxBody.decode(txBody);\n    return Object.assign(Object.assign({}, decodedTxBody), {\n      messages: decodedTxBody.messages.map(_ref3 => {\n        let {\n          typeUrl: typeUrl,\n          value\n        } = _ref3;\n\n        if (!typeUrl) {\n          throw new Error(\"Missing type_url in Any\");\n        }\n\n        if (!value) {\n          throw new Error(\"Missing value in Any\");\n        }\n\n        return this.decode({\n          typeUrl,\n          value\n        });\n      })\n    });\n  }\n\n}\n\nexports.Registry = Registry;","map":{"version":3,"mappings":"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","names":["isTsProtoGeneratedType","type","fromPartial","exports","isPbjsGeneratedType","defaultTypeUrls","cosmosCoin","cosmosMsgSend","cosmosTxBody","googleAny","isTxBodyEncodeObject","encodeObject","typeUrl","Registry","constructor","customTypes","types","Map","coin_1","tx_1","register","set","lookupType","get","lookupTypeWithError","Error","encode","value","encodeTxBody","instance","create","finish","txBodyFields","wrappedMessages","messages","map","message","messageBytes","any_1","txBody","tx_2","Object","decode","decodeTxBody","decoded","entries","forEach","key","val","Buffer","isBuffer","Uint8Array","from","decodedTxBody"],"sourceRoot":"","sources":["../src/registry.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}