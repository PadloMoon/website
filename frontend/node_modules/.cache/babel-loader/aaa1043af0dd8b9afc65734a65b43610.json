{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.batchVerifyNonMembership = exports.batchVerifyMembership = exports.verifyNonMembership = exports.verifyMembership = void 0;\n\nconst compress_1 = require(\"./compress\");\n\nconst proofs_1 = require(\"./proofs\");\n\nconst specs_1 = require(\"./specs\");\n/*\nThis implements the client side functions as specified in\nhttps://github.com/cosmos/ics/tree/master/spec/ics-023-vector-commitments\n\nIn particular:\n\n  // Assumes ExistenceProof\n  type verifyMembership = (root: CommitmentRoot, proof: CommitmentProof, key: Key, value: Value) => boolean\n\n  // Assumes NonExistenceProof\n  type verifyNonMembership = (root: CommitmentRoot, proof: CommitmentProof, key: Key) => boolean\n\n  // Assumes BatchProof - required ExistenceProofs may be a subset of all items proven\n  type batchVerifyMembership = (root: CommitmentRoot, proof: CommitmentProof, items: Map<Key, Value>) => boolean\n\n  // Assumes BatchProof - required NonExistenceProofs may be a subset of all items proven\n  type batchVerifyNonMembership = (root: CommitmentRoot, proof: CommitmentProof, keys: Set<Key>) => boolean\n\nWe make an adjustment to accept a Spec to ensure the provided proof is in the format of the expected merkle store.\nThis can avoid an range of attacks on fake preimages, as we need to be careful on how to map key, value -> leaf\nand determine neighbors\n*/\n\n/**\n * verifyMembership ensures proof is (contains) a valid existence proof for the given\n */\n\n\nfunction verifyMembership(proof, spec, root, key, value) {\n  const norm = (0, compress_1.decompress)(proof);\n  const exist = getExistForKey(norm, key);\n\n  if (!exist) {\n    return false;\n  }\n\n  try {\n    (0, proofs_1.verifyExistence)(exist, spec, root, key, value);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n\nexports.verifyMembership = verifyMembership;\n/**\n * verifyNonMembership ensures proof is (contains) a valid non-existence proof for the given key\n */\n\nfunction verifyNonMembership(proof, spec, root, key) {\n  const norm = (0, compress_1.decompress)(proof);\n  const nonexist = getNonExistForKey(norm, key);\n\n  if (!nonexist) {\n    return false;\n  }\n\n  try {\n    (0, proofs_1.verifyNonExistence)(nonexist, spec, root, key);\n    return true;\n  } catch (_a) {\n    return false;\n  }\n}\n\nexports.verifyNonMembership = verifyNonMembership;\n/**\n * batchVerifyMembership ensures proof is (contains) a valid existence proof for the given\n */\n\nfunction batchVerifyMembership(proof, spec, root, items) {\n  const norm = (0, compress_1.decompress)(proof);\n\n  for (const [key, value] of items.entries()) {\n    if (!verifyMembership(norm, spec, root, key, value)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.batchVerifyMembership = batchVerifyMembership;\n/**\n * batchVerifyNonMembership ensures proof is (contains) a valid existence proof for the given\n */\n\nfunction batchVerifyNonMembership(proof, spec, root, keys) {\n  const norm = (0, compress_1.decompress)(proof);\n\n  for (const key of keys) {\n    if (!verifyNonMembership(norm, spec, root, key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.batchVerifyNonMembership = batchVerifyNonMembership;\n\nfunction getExistForKey(proof, key) {\n  const match = p => !!p && (0, specs_1.bytesEqual)(key, p.key);\n\n  if (match(proof.exist)) {\n    return proof.exist;\n  } else if (proof.batch) {\n    return proof.batch.entries.map(x => x.exist || null).find(match);\n  }\n\n  return undefined;\n}\n\nfunction getNonExistForKey(proof, key) {\n  const match = p => {\n    return !!p && (!p.left || (0, specs_1.bytesBefore)(p.left.key, key)) && (!p.right || (0, specs_1.bytesBefore)(key, p.right.key));\n  };\n\n  if (match(proof.nonexist)) {\n    return proof.nonexist;\n  } else if (proof.batch) {\n    return proof.batch.entries.map(x => x.nonexist || null).find(match);\n  }\n\n  return undefined;\n}","map":{"version":3,"mappings":"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","names":["verifyMembership","proof","spec","root","key","value","norm","exist","getExistForKey","exports","verifyNonMembership","nonexist","getNonExistForKey","batchVerifyMembership","items","entries","batchVerifyNonMembership","keys","match","p","batch","map","x","find","undefined","left","right"],"sourceRoot":"","sources":["../src/ics23.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}