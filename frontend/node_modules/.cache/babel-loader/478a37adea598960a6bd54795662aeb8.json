{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupGovExtension = void 0;\n\nconst query_1 = require(\"cosmjs-types/cosmos/gov/v1beta1/query\");\n\nconst utils_1 = require(\"./utils\");\n\nfunction setupGovExtension(base) {\n  const rpc = utils_1.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    gov: {\n      params: async parametersType => {\n        const response = await queryService.Params({\n          paramsType: parametersType\n        });\n        return response;\n      },\n      proposals: async (proposalStatus, depositorAddress, voterAddress, paginationKey) => {\n        const response = await queryService.Proposals({\n          proposalStatus,\n          depositor: depositorAddress,\n          voter: voterAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      proposal: async proposalId => {\n        const response = await queryService.Proposal({\n          proposalId: utils_1.longify(proposalId)\n        });\n        return response;\n      },\n      deposits: async (proposalId, paginationKey) => {\n        const response = await queryService.Deposits({\n          proposalId: utils_1.longify(proposalId),\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      deposit: async (proposalId, depositorAddress) => {\n        const response = await queryService.Deposit({\n          proposalId: utils_1.longify(proposalId),\n          depositor: depositorAddress\n        });\n        return response;\n      },\n      tally: async proposalId => {\n        const response = await queryService.TallyResult({\n          proposalId: utils_1.longify(proposalId)\n        });\n        return response;\n      },\n      votes: async (proposalId, paginationKey) => {\n        const response = await queryService.Votes({\n          proposalId: utils_1.longify(proposalId),\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      vote: async (proposalId, voterAddress) => {\n        const response = await queryService.Vote({\n          proposalId: utils_1.longify(proposalId),\n          voter: voterAddress\n        });\n        return response;\n      }\n    }\n  };\n}\n\nexports.setupGovExtension = setupGovExtension;","map":{"version":3,"mappings":";;;;;;;AAEA;;AAcA;;AA2BA,SAAgBA,iBAAhB,CAAkCC,IAAlC,EAAmD;AACjD,QAAMC,GAAG,GAAGC,gCAAwBF,IAAxB,CAAZ,CADiD,CAGjD;AACA;;AACA,QAAMG,YAAY,GAAG,IAAIC,uBAAJ,CAAoBH,GAApB,CAArB;AAEA,SAAO;AACLI,OAAG,EAAE;AACHC,YAAM,EAAE,MAAOC,cAAP,IAAwC;AAC9C,cAAMC,QAAQ,GAAG,MAAML,YAAY,CAACM,MAAb,CAAoB;AAAEC,oBAAU,EAAEH;AAAd,SAApB,CAAvB;AACA,eAAOC,QAAP;AACD,OAJE;AAKHG,eAAS,EAAE,OACTC,cADS,EAETC,gBAFS,EAGTC,YAHS,EAITC,aAJS,KAKP;AACF,cAAMP,QAAQ,GAAG,MAAML,YAAY,CAACa,SAAb,CAAuB;AAC5CJ,wBAD4C;AAE5CK,mBAAS,EAAEJ,gBAFiC;AAG5CK,eAAK,EAAEJ,YAHqC;AAI5CK,oBAAU,EAAEjB,yBAAiBa,aAAjB;AAJgC,SAAvB,CAAvB;AAMA,eAAOP,QAAP;AACD,OAlBE;AAmBHY,cAAQ,EAAE,MAAOC,UAAP,IAAoC;AAC5C,cAAMb,QAAQ,GAAG,MAAML,YAAY,CAACmB,QAAb,CAAsB;AAAED,oBAAU,EAAEnB,gBAAQmB,UAAR;AAAd,SAAtB,CAAvB;AACA,eAAOb,QAAP;AACD,OAtBE;AAuBHe,cAAQ,EAAE,OAAOF,UAAP,EAAkCN,aAAlC,KAAgE;AACxE,cAAMP,QAAQ,GAAG,MAAML,YAAY,CAACqB,QAAb,CAAsB;AAC3CH,oBAAU,EAAEnB,gBAAQmB,UAAR,CAD+B;AAE3CF,oBAAU,EAAEjB,yBAAiBa,aAAjB;AAF+B,SAAtB,CAAvB;AAIA,eAAOP,QAAP;AACD,OA7BE;AA8BHiB,aAAO,EAAE,OAAOJ,UAAP,EAAkCR,gBAAlC,KAA8D;AACrE,cAAML,QAAQ,GAAG,MAAML,YAAY,CAACuB,OAAb,CAAqB;AAC1CL,oBAAU,EAAEnB,gBAAQmB,UAAR,CAD8B;AAE1CJ,mBAAS,EAAEJ;AAF+B,SAArB,CAAvB;AAIA,eAAOL,QAAP;AACD,OApCE;AAqCHmB,WAAK,EAAE,MAAON,UAAP,IAAoC;AACzC,cAAMb,QAAQ,GAAG,MAAML,YAAY,CAACyB,WAAb,CAAyB;AAC9CP,oBAAU,EAAEnB,gBAAQmB,UAAR;AADkC,SAAzB,CAAvB;AAGA,eAAOb,QAAP;AACD,OA1CE;AA2CHqB,WAAK,EAAE,OAAOR,UAAP,EAAkCN,aAAlC,KAAgE;AACrE,cAAMP,QAAQ,GAAG,MAAML,YAAY,CAAC2B,KAAb,CAAmB;AACxCT,oBAAU,EAAEnB,gBAAQmB,UAAR,CAD4B;AAExCF,oBAAU,EAAEjB,yBAAiBa,aAAjB;AAF4B,SAAnB,CAAvB;AAIA,eAAOP,QAAP;AACD,OAjDE;AAkDHuB,UAAI,EAAE,OAAOV,UAAP,EAAkCP,YAAlC,KAA0D;AAC9D,cAAMN,QAAQ,GAAG,MAAML,YAAY,CAAC6B,IAAb,CAAkB;AACvCX,oBAAU,EAAEnB,gBAAQmB,UAAR,CAD2B;AAEvCH,eAAK,EAAEJ;AAFgC,SAAlB,CAAvB;AAIA,eAAON,QAAP;AACD;AAxDE;AADA,GAAP;AA4DD;;AAnEDyB","names":["setupGovExtension","base","rpc","utils_1","queryService","query_1","gov","params","parametersType","response","Params","paramsType","proposals","proposalStatus","depositorAddress","voterAddress","paginationKey","Proposals","depositor","voter","pagination","proposal","proposalId","Proposal","deposits","Deposits","deposit","Deposit","tally","TallyResult","votes","Votes","vote","Vote","exports"],"sourceRoot":"","sources":["../../src/queries/gov.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}