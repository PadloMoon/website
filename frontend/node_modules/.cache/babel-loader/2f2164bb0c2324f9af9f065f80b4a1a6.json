{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpClient = exports.http = void 0;\n\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\n\nconst axios_1 = __importDefault(require(\"axios\"));\n\nconst rpcclient_1 = require(\"./rpcclient\");\n\nfunction filterBadStatus(res) {\n  if (res.status >= 400) {\n    throw new Error(`Bad status on response: ${res.status}`);\n  }\n\n  return res;\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nasync function http(method, url, request) {\n  if (typeof fetch !== \"undefined\") {\n    const body = request ? JSON.stringify(request) : undefined;\n    return fetch(url, {\n      method: method,\n      body: body\n    }).then(filterBadStatus).then(res => res.json());\n  } else {\n    return axios_1.default.request({\n      url: url,\n      method: method,\n      data: request\n    }).then(res => res.data);\n  }\n}\n\nexports.http = http;\n\nclass HttpClient {\n  constructor() {\n    let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"http://localhost:46657\";\n    // accept host.name:port and assume http protocol\n    this.url = rpcclient_1.hasProtocol(url) ? url : \"http://\" + url;\n  }\n\n  disconnect() {// nothing to be done\n  }\n\n  async execute(request) {\n    const response = json_rpc_1.parseJsonRpcResponse(await http(\"POST\", this.url, request));\n\n    if (json_rpc_1.isJsonRpcErrorResponse(response)) {\n      throw new Error(JSON.stringify(response.error));\n    }\n\n    return response;\n  }\n\n}\n\nexports.HttpClient = HttpClient;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AAMA;;AAEA;;AAMA,SAASA,eAAT,CAAyBC,GAAzB,EAAiC;AAC/B,MAAIA,GAAG,CAACC,MAAJ,IAAc,GAAlB,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,2BAA2BF,GAAG,CAACC,MAAM,EAA/C,CAAN;AACD;;AACD,SAAOD,GAAP;AACD;AAED;;;;;AAKA;;;AACO,eAAeG,IAAf,CAAoBC,MAApB,EAAoCC,GAApC,EAAiDC,OAAjD,EAA8D;AACnE,MAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC;AAChC,UAAMC,IAAI,GAAGF,OAAO,GAAGG,IAAI,CAACC,SAAL,CAAeJ,OAAf,CAAH,GAA6BK,SAAjD;AACA,WAAOJ,KAAK,CAACF,GAAD,EAAM;AAAED,YAAM,EAAEA,MAAV;AAAkBI,UAAI,EAAEA;AAAxB,KAAN,CAAL,CACJI,IADI,CACCb,eADD,EAEJa,IAFI,CAEEZ,GAAD,IAAcA,GAAG,CAACa,IAAJ,EAFf,CAAP;AAGD,GALD,MAKO;AACL,WAAOC,gBAAMR,OAAN,CAAc;AAAED,SAAG,EAAEA,GAAP;AAAYD,YAAM,EAAEA,MAApB;AAA4BW,UAAI,EAAET;AAAlC,KAAd,EAA2DM,IAA3D,CAAiEZ,GAAD,IAASA,GAAG,CAACe,IAA7E,CAAP;AACD;AACF;;AATDC;;AAWA,MAAaC,UAAb,CAAuB;AAGrBC,gBAAiD;AAAA,QAA9Bb,GAA8B,uEAAxB,wBAAwB;AAC/C;AACA,SAAKA,GAAL,GAAWc,wBAAYd,GAAZ,IAAmBA,GAAnB,GAAyB,YAAYA,GAAhD;AACD;;AAEMe,YAAU,IACf;AACD;;AAEmB,QAAPC,OAAO,CAACf,OAAD,EAAwB;AAC1C,UAAMgB,QAAQ,GAAGC,gCAAqB,MAAMpB,IAAI,CAAC,MAAD,EAAS,KAAKE,GAAd,EAAmBC,OAAnB,CAA/B,CAAjB;;AACA,QAAIiB,kCAAuBD,QAAvB,CAAJ,EAAsC;AACpC,YAAM,IAAIpB,KAAJ,CAAUO,IAAI,CAACC,SAAL,CAAeY,QAAQ,CAACE,KAAxB,CAAV,CAAN;AACD;;AACD,WAAOF,QAAP;AACD;;AAlBoB;;AAAvBN","names":["filterBadStatus","res","status","Error","http","method","url","request","fetch","body","JSON","stringify","undefined","then","json","axios_1","data","exports","HttpClient","constructor","rpcclient_1","disconnect","execute","response","json_rpc_1","error"],"sourceRoot":"","sources":["../../src/rpcclients/httpclient.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}