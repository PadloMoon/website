{"ast":null,"code":"import { ethers } from \"ethers\";\nimport { defaultWallet } from \"../slices/interfaces\";\nimport * as utils from \"./utils\";\nimport * as config from \"../config/config\"; // One feature of MetaMask is that the Dapp developer\n// can programmatically\n// change the network that the browser\n// extension is connected to.\n// This feature is implemented below,\n// to automatically set - up Cronos\n\nexport const switchNetwork = async () => {\n  try {\n    await window.ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{\n        chainId: config.configVars.rpcNetwork.chainIdHex\n      }]\n    });\n  } catch (e) {\n    console.log(e);\n    await window.ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [{\n        chainId: config.configVars.rpcNetwork.chainIdHex,\n        chainName: config.configVars.rpcNetwork.chainName,\n        rpcUrls: [config.configVars.rpcNetwork.rpcUrl],\n        nativeCurrency: config.configVars.rpcNetwork.nativeCurrency,\n        blockExplorerUrls: [config.configVars.rpcNetwork.blockExplorerUrl]\n      }]\n    });\n  }\n}; // Main login flow for injected wallet like MetaMask\n\nexport const connect = async () => {\n  try {\n    let chainId = await window.ethereum.request({\n      method: \"eth_chainId\"\n    });\n\n    if (!(chainId === config.configVars.rpcNetwork.chainIdHex)) {\n      await switchNetwork();\n      await utils.delay(2000);\n      return defaultWallet;\n    }\n\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\"\n    }); // It is possible to subscribe to events chainChanged,\n    // accountsChanged or disconnect,\n    // and reload the Dapp whenever one of these events occurs\n\n    window.ethereum.on(\"chainChanged\", utils.reloadApp);\n    window.ethereum.on(\"accountsChanged\", utils.reloadApp);\n    window.ethereum.on(\"disconnect\", utils.reloadApp);\n    return { ...defaultWallet,\n      walletProviderName: \"metamask\",\n      address: accounts[0],\n      browserWeb3Provider: new ethers.providers.Web3Provider(window.ethereum),\n      serverWeb3Provider: new ethers.providers.JsonRpcProvider(config.configVars.rpcNetwork.rpcUrl),\n      connected: true,\n      chainId: utils.hexToInt(await window.ethereum.request({\n        method: \"eth_chainId\"\n      }))\n    };\n  } catch (e) {\n    console.log(\"error\", e);\n    window.alert(e);\n    return defaultWallet;\n  }\n};","map":{"version":3,"sources":["/home/vanka/dev/padlomoon/frontend/src/utils/metamask.ts"],"names":["ethers","defaultWallet","utils","config","switchNetwork","window","ethereum","request","method","params","chainId","configVars","rpcNetwork","chainIdHex","e","console","log","chainName","rpcUrls","rpcUrl","nativeCurrency","blockExplorerUrls","blockExplorerUrl","connect","delay","accounts","on","reloadApp","walletProviderName","address","browserWeb3Provider","providers","Web3Provider","serverWeb3Provider","JsonRpcProvider","connected","hexToInt","alert"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\";\n\nimport { IWallet, defaultWallet } from \"../slices/interfaces\";\nimport * as utils from \"./utils\";\nimport * as config from \"../config/config\";\n\n// One feature of MetaMask is that the Dapp developer\n// can programmatically\n// change the network that the browser\n// extension is connected to.\n// This feature is implemented below,\n// to automatically set - up Cronos\nexport const switchNetwork = async () => {\n  try {\n    await window.ethereum.request({\n      method: \"wallet_switchEthereumChain\",\n      params: [{ chainId: config.configVars.rpcNetwork.chainIdHex }],\n    });\n  } catch (e) {\n    console.log(e);\n    await window.ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [\n        {\n          chainId: config.configVars.rpcNetwork.chainIdHex,\n          chainName: config.configVars.rpcNetwork.chainName,\n          rpcUrls: [config.configVars.rpcNetwork.rpcUrl],\n          nativeCurrency: config.configVars.rpcNetwork.nativeCurrency,\n          blockExplorerUrls: [config.configVars.rpcNetwork.blockExplorerUrl],\n        },\n      ],\n    });\n  }\n};\n\n// Main login flow for injected wallet like MetaMask\nexport const connect = async (): Promise<IWallet> => {\n  try {\n    let chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n    if (!(chainId === config.configVars.rpcNetwork.chainIdHex)) {\n      await switchNetwork();\n      await utils.delay(2000);\n      return defaultWallet;\n    }\n\n    const accounts = await window.ethereum.request({\n      method: \"eth_requestAccounts\",\n    });\n\n    // It is possible to subscribe to events chainChanged,\n    // accountsChanged or disconnect,\n    // and reload the Dapp whenever one of these events occurs\n    window.ethereum.on(\"chainChanged\", utils.reloadApp);\n    window.ethereum.on(\"accountsChanged\", utils.reloadApp);\n    window.ethereum.on(\"disconnect\", utils.reloadApp);\n\n    return {\n      ...defaultWallet,\n      walletProviderName: \"metamask\",\n      address: accounts[0],\n      browserWeb3Provider: new ethers.providers.Web3Provider(window.ethereum),\n      serverWeb3Provider: new ethers.providers.JsonRpcProvider(\n        config.configVars.rpcNetwork.rpcUrl\n      ),\n      connected: true,\n      chainId: utils.hexToInt(\n        await window.ethereum.request({ method: \"eth_chainId\" })\n      ),\n    };\n  } catch (e) {\n    console.log(\"error\", e);\n    window.alert(e);\n    return defaultWallet;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}