{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Secp256k1 = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst elliptic_1 = __importDefault(require(\"elliptic\"));\n\nconst secp256k1signature_1 = require(\"./secp256k1signature\");\n\nconst secp256k1 = new elliptic_1.default.ec(\"secp256k1\");\nconst secp256k1N = new bn_js_1.default(\"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"hex\");\n\nclass Secp256k1 {\n  static async makeKeypair(privkey) {\n    if (privkey.length !== 32) {\n      // is this check missing in secp256k1.validatePrivateKey?\n      // https://github.com/bitjson/bitcoin-ts/issues/4\n      throw new Error(\"input data is not a valid secp256k1 private key\");\n    }\n\n    const keypair = secp256k1.keyFromPrivate(privkey);\n\n    if (keypair.validate().result !== true) {\n      throw new Error(\"input data is not a valid secp256k1 private key\");\n    } // range test that is not part of the elliptic implementation\n\n\n    const privkeyAsBigInteger = new bn_js_1.default(privkey);\n\n    if (privkeyAsBigInteger.gte(secp256k1N)) {\n      // not strictly smaller than N\n      throw new Error(\"input data is not a valid secp256k1 private key\");\n    }\n\n    const out = {\n      privkey: encoding_1.fromHex(keypair.getPrivate(\"hex\")),\n      // encodes uncompressed as\n      // - 1-byte prefix \"04\"\n      // - 32-byte x coordinate\n      // - 32-byte y coordinate\n      pubkey: Uint8Array.from(keypair.getPublic(\"array\"))\n    };\n    return out;\n  } // Creates a signature that is\n  // - deterministic (RFC 6979)\n  // - lowS signature\n  // - DER encoded\n\n\n  static async createSignature(messageHash, privkey) {\n    if (messageHash.length === 0) {\n      throw new Error(\"Message hash must not be empty\");\n    }\n\n    if (messageHash.length > 32) {\n      throw new Error(\"Message hash length must not exceed 32 bytes\");\n    }\n\n    const keypair = secp256k1.keyFromPrivate(privkey); // the `canonical` option ensures creation of lowS signature representations\n\n    const {\n      r,\n      s,\n      recoveryParam\n    } = keypair.sign(messageHash, {\n      canonical: true\n    });\n    if (typeof recoveryParam !== \"number\") throw new Error(\"Recovery param missing\");\n    return new secp256k1signature_1.ExtendedSecp256k1Signature(Uint8Array.from(r.toArray()), Uint8Array.from(s.toArray()), recoveryParam);\n  }\n\n  static async verifySignature(signature, messageHash, pubkey) {\n    if (messageHash.length === 0) {\n      throw new Error(\"Message hash must not be empty\");\n    }\n\n    if (messageHash.length > 32) {\n      throw new Error(\"Message hash length must not exceed 32 bytes\");\n    }\n\n    const keypair = secp256k1.keyFromPublic(pubkey); // From https://github.com/indutny/elliptic:\n    //\n    //     Sign the message's hash (input must be an array, or a hex-string)\n    //\n    //     Signature MUST be either:\n    //     1) DER-encoded signature as hex-string; or\n    //     2) DER-encoded signature as buffer; or\n    //     3) object with two hex-string properties (r and s); or\n    //     4) object with two buffer properties (r and s)\n    //\n    // Uint8Array is not a Buffer, but elliptic seems to be happy with the interface\n    // common to both types. Uint8Array is not an array of ints but the interface is\n    // similar\n\n    try {\n      return keypair.verify(messageHash, signature.toDer());\n    } catch (error) {\n      return false;\n    }\n  }\n\n  static recoverPubkey(signature, messageHash) {\n    const signatureForElliptic = {\n      r: encoding_1.toHex(signature.r()),\n      s: encoding_1.toHex(signature.s())\n    };\n    const point = secp256k1.recoverPubKey(messageHash, signatureForElliptic, signature.recovery);\n    const keypair = secp256k1.keyFromPublic(point);\n    return encoding_1.fromHex(keypair.getPublic(false, \"hex\"));\n  }\n\n  static compressPubkey(pubkey) {\n    switch (pubkey.length) {\n      case 33:\n        return pubkey;\n\n      case 65:\n        return Uint8Array.from(secp256k1.keyFromPublic(pubkey).getPublic(true, \"array\"));\n\n      default:\n        throw new Error(\"Invalid pubkey length\");\n    }\n  }\n\n  static trimRecoveryByte(signature) {\n    switch (signature.length) {\n      case 64:\n        return signature;\n\n      case 65:\n        return signature.slice(0, 64);\n\n      default:\n        throw new Error(\"Invalid signature length\");\n    }\n  }\n\n}\n\nexports.Secp256k1 = Secp256k1;","map":{"version":3,"mappings":"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","names":["secp256k1","elliptic_1","ec","secp256k1N","bn_js_1","Secp256k1","makeKeypair","privkey","length","Error","keypair","keyFromPrivate","validate","result","privkeyAsBigInteger","gte","out","encoding_1","getPrivate","pubkey","Uint8Array","from","getPublic","createSignature","messageHash","r","s","recoveryParam","sign","canonical","secp256k1signature_1","toArray","verifySignature","signature","keyFromPublic","verify","toDer","error","recoverPubkey","signatureForElliptic","point","recoverPubKey","recovery","compressPubkey","trimRecoveryByte","slice","exports"],"sourceRoot":"","sources":["../src/secp256k1.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}