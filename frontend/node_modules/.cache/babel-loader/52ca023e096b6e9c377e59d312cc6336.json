{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamingSocket = void 0;\n\nconst xstream_1 = require(\"xstream\");\n\nconst socketwrapper_1 = require(\"./socketwrapper\");\n/**\n * A WebSocket wrapper that exposes all events as a stream.\n *\n * This underlying socket will not be closed when the stream has no listeners\n */\n\n\nclass StreamingSocket {\n  constructor(url) {\n    let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n    this.socket = new socketwrapper_1.SocketWrapper(url, event => {\n      if (this.eventProducerListener) {\n        this.eventProducerListener.next(event);\n      }\n    }, errorEvent => {\n      if (this.eventProducerListener) {\n        this.eventProducerListener.error(errorEvent);\n      }\n    }, () => {// socket opened\n    }, closeEvent => {\n      if (this.eventProducerListener) {\n        if (closeEvent.wasClean) {\n          this.eventProducerListener.complete();\n        } else {\n          this.eventProducerListener.error(\"Socket was closed unclean\");\n        }\n      }\n    }, timeout);\n    this.connected = this.socket.connected;\n    const eventProducer = {\n      start: listener => this.eventProducerListener = listener,\n      stop: () => this.eventProducerListener = undefined\n    };\n    this.events = xstream_1.Stream.create(eventProducer);\n  }\n\n  connect() {\n    this.socket.connect();\n  }\n\n  disconnect() {\n    this.socket.disconnect();\n  }\n\n  async send(data) {\n    return this.socket.send(data);\n  }\n\n}\n\nexports.StreamingSocket = StreamingSocket;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;AAEA;;;;;;;AAKA,MAAaA,eAAb,CAA4B;AAM1BC,cAAmBC,GAAnB,EAAgD;AAAA,QAAhBC,OAAgB,uEAAN,KAAM;AAC9C,SAAKC,MAAL,GAAc,IAAIC,6BAAJ,CACZH,GADY,EAEXI,KAAD,IAAU;AACR,UAAI,KAAKC,qBAAT,EAAgC;AAC9B,aAAKA,qBAAL,CAA2BC,IAA3B,CAAgCF,KAAhC;AACD;AACF,KANW,EAOXG,UAAD,IAAe;AACb,UAAI,KAAKF,qBAAT,EAAgC;AAC9B,aAAKA,qBAAL,CAA2BG,KAA3B,CAAiCD,UAAjC;AACD;AACF,KAXW,EAYZ,MAAK,CACH;AACD,KAdW,EAeXE,UAAD,IAAe;AACb,UAAI,KAAKJ,qBAAT,EAAgC;AAC9B,YAAII,UAAU,CAACC,QAAf,EAAyB;AACvB,eAAKL,qBAAL,CAA2BM,QAA3B;AACD,SAFD,MAEO;AACL,eAAKN,qBAAL,CAA2BG,KAA3B,CAAiC,2BAAjC;AACD;AACF;AACF,KAvBW,EAwBZP,OAxBY,CAAd;AA0BA,SAAKW,SAAL,GAAiB,KAAKV,MAAL,CAAYU,SAA7B;AAEA,UAAMC,aAAa,GAAkB;AACnCC,WAAK,EAAGC,QAAD,IAAe,KAAKV,qBAAL,GAA6BU,QADhB;AAEnCC,UAAI,EAAE,MAAO,KAAKX,qBAAL,GAA6BY;AAFP,KAArC;AAIA,SAAKC,MAAL,GAAcC,iBAAOC,MAAP,CAAcP,aAAd,CAAd;AACD;;AAEMQ,SAAO;AACZ,SAAKnB,MAAL,CAAYmB,OAAZ;AACD;;AAEMC,YAAU;AACf,SAAKpB,MAAL,CAAYoB,UAAZ;AACD;;AAEgB,QAAJC,IAAI,CAACC,IAAD,EAAa;AAC5B,WAAO,KAAKtB,MAAL,CAAYqB,IAAZ,CAAiBC,IAAjB,CAAP;AACD;;AApDyB;;AAA5BC","names":["StreamingSocket","constructor","url","timeout","socket","socketwrapper_1","event","eventProducerListener","next","errorEvent","error","closeEvent","wasClean","complete","connected","eventProducer","start","listener","stop","undefined","events","xstream_1","create","connect","disconnect","send","data","exports"],"sourceRoot":"","sources":["../src/streamingsocket.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}