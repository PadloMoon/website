{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupStakingExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst query_1 = require(\"cosmjs-types/cosmos/staking/v1beta1/query\");\n\nconst long_1 = __importDefault(require(\"long\"));\n\nconst utils_1 = require(\"./utils\");\n\nfunction setupStakingExtension(base) {\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const rpc = utils_1.createProtobufRpcClient(base);\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    staking: {\n      delegation: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.Delegation({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      delegatorDelegations: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorDelegations({\n          delegatorAddr: delegatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      delegatorUnbondingDelegations: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorUnbondingDelegations({\n          delegatorAddr: delegatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      delegatorValidator: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.DelegatorValidator({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      delegatorValidators: async (delegatorAddress, paginationKey) => {\n        const response = await queryService.DelegatorValidators({\n          delegatorAddr: delegatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      historicalInfo: async height => {\n        const response = await queryService.HistoricalInfo({\n          height: long_1.default.fromNumber(height, true)\n        });\n        return response;\n      },\n      params: async () => {\n        const response = await queryService.Params({});\n        return response;\n      },\n      pool: async () => {\n        const response = await queryService.Pool({});\n        return response;\n      },\n      redelegations: async (delegatorAddress, sourceValidatorAddress, destinationValidatorAddress, paginationKey) => {\n        const response = await queryService.Redelegations({\n          delegatorAddr: delegatorAddress,\n          srcValidatorAddr: sourceValidatorAddress,\n          dstValidatorAddr: destinationValidatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      unbondingDelegation: async (delegatorAddress, validatorAddress) => {\n        const response = await queryService.UnbondingDelegation({\n          delegatorAddr: delegatorAddress,\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      validator: async validatorAddress => {\n        const response = await queryService.Validator({\n          validatorAddr: validatorAddress\n        });\n        return response;\n      },\n      validatorDelegations: async (validatorAddress, paginationKey) => {\n        const response = await queryService.ValidatorDelegations({\n          validatorAddr: validatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      validators: async (status, paginationKey) => {\n        const response = await queryService.Validators({\n          status: status,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      },\n      validatorUnbondingDelegations: async (validatorAddress, paginationKey) => {\n        const response = await queryService.ValidatorUnbondingDelegations({\n          validatorAddr: validatorAddress,\n          pagination: utils_1.createPagination(paginationKey)\n        });\n        return response;\n      }\n    }\n  };\n}\n\nexports.setupStakingExtension = setupStakingExtension;","map":{"version":3,"mappings":"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","names":["setupStakingExtension","base","rpc","utils_1","queryService","query_1","staking","delegation","delegatorAddress","validatorAddress","response","Delegation","delegatorAddr","validatorAddr","delegatorDelegations","paginationKey","DelegatorDelegations","pagination","delegatorUnbondingDelegations","DelegatorUnbondingDelegations","delegatorValidator","DelegatorValidator","delegatorValidators","DelegatorValidators","historicalInfo","height","HistoricalInfo","long_1","fromNumber","params","Params","pool","Pool","redelegations","sourceValidatorAddress","destinationValidatorAddress","Redelegations","srcValidatorAddr","dstValidatorAddr","unbondingDelegation","UnbondingDelegation","validator","Validator","validatorDelegations","ValidatorDelegations","validators","status","Validators","validatorUnbondingDelegations","ValidatorUnbondingDelegations","exports"],"sourceRoot":"","sources":["../../src/queries/staking.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}