{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\n\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\n\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\n\nconst long_1 = __importDefault(require(\"long\"));\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\n\n\nfunction makeSignerInfos(signers, signMode) {\n  return signers.map(_ref => {\n    let {\n      pubkey,\n      sequence\n    } = _ref;\n    return {\n      publicKey: pubkey,\n      modeInfo: {\n        single: {\n          mode: signMode\n        }\n      },\n      sequence: long_1.default.fromNumber(sequence)\n    };\n  });\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\n\n\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit) {\n  let signMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : signing_1.SignMode.SIGN_MODE_DIRECT;\n  const authInfo = {\n    signerInfos: makeSignerInfos(signers, signMode),\n    fee: {\n      amount: [...feeAmount],\n      gasLimit: long_1.default.fromNumber(gasLimit)\n    }\n  };\n  return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\n\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\n\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\n\nexports.makeSignDoc = makeSignDoc;\n\nfunction makeSignBytes(_ref2) {\n  let {\n    accountNumber,\n    authInfoBytes,\n    bodyBytes,\n    chainId\n  } = _ref2;\n  const signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\n\nexports.makeSignBytes = makeSignBytes;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAEA;;AACA;;AAEA;AAEA;;;;;;;AAKA,SAASA,eAAT,CACEC,OADF,EAEEC,QAFF,EAEoB;AAElB,SAAOD,OAAO,CAACE,GAAR,CACL;AAAA,QAAC;AAAEC,YAAF;AAAUC;AAAV,KAAD;AAAA,WAAuC;AACrCC,eAAS,EAAEF,MAD0B;AAErCG,cAAQ,EAAE;AACRC,cAAM,EAAE;AAAEC,cAAI,EAAEP;AAAR;AADA,OAF2B;AAKrCG,cAAQ,EAAEK,eAAKC,UAAL,CAAgBN,QAAhB;AAL2B,KAAvC;AAAA,GADK,CAAP;AASD;AAED;;;;;;;AAKA,SAAgBO,iBAAhB,CACEX,OADF,EAEEY,SAFF,EAGEC,QAHF,EAIsC;AAAA,MAApCZ,QAAoC,uEAAzBa,mBAASC,gBAAgB;AAEpC,QAAMC,QAAQ,GAAG;AACfC,eAAW,EAAElB,eAAe,CAACC,OAAD,EAAUC,QAAV,CADb;AAEfiB,OAAG,EAAE;AACHC,YAAM,EAAE,CAAC,GAAGP,SAAJ,CADL;AAEHC,cAAQ,EAAEJ,eAAKC,UAAL,CAAgBG,QAAhB;AAFP;AAFU,GAAjB;AAOA,SAAOO,cAASC,MAAT,CAAgBD,cAASE,WAAT,CAAqBN,QAArB,CAAhB,EAAgDO,MAAhD,EAAP;AACD;;AAdDC;;AAgBA,SAAgBC,WAAhB,CACEC,SADF,EAEEC,aAFF,EAGEC,OAHF,EAIEC,aAJF,EAIuB;AAErB,SAAO;AACLH,aAAS,EAAEA,SADN;AAELC,iBAAa,EAAEA,aAFV;AAGLC,WAAO,EAAEA,OAHJ;AAILC,iBAAa,EAAEpB,eAAKC,UAAL,CAAgBmB,aAAhB;AAJV,GAAP;AAMD;;AAZDL;;AAcA,SAAgBM,aAAhB,QAA2F;AAAA,MAA7D;AAAED,iBAAF;AAAiBF,iBAAjB;AAAgCD,aAAhC;AAA2CE;AAA3C,GAA6D;AACzF,QAAMG,OAAO,GAAGX,aAAQE,WAAR,CAAoB;AAClCO,iBAAa,EAAEA,aADmB;AAElCF,iBAAa,EAAEA,aAFmB;AAGlCD,aAAS,EAAEA,SAHuB;AAIlCE,WAAO,EAAEA;AAJyB,GAApB,CAAhB;AAMA,SAAOR,aAAQC,MAAR,CAAeU,OAAf,EAAwBR,MAAxB,EAAP;AACD;;AARDC","names":["makeSignerInfos","signers","signMode","map","pubkey","sequence","publicKey","modeInfo","single","mode","long_1","fromNumber","makeAuthInfoBytes","feeAmount","gasLimit","signing_1","SIGN_MODE_DIRECT","authInfo","signerInfos","fee","amount","tx_1","encode","fromPartial","finish","exports","makeSignDoc","bodyBytes","authInfoBytes","chainId","accountNumber","makeSignBytes","signDoc"],"sourceRoot":"","sources":["../src/signing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}