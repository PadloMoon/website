{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeBech32Pubkey = exports.encodeAminoPubkey = exports.decodeBech32Pubkey = exports.decodeAminoPubkey = exports.encodeSecp256k1Pubkey = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst pubkeys_1 = require(\"./pubkeys\");\n\nfunction encodeSecp256k1Pubkey(pubkey) {\n  if (pubkey.length !== 33 || pubkey[0] !== 0x02 && pubkey[0] !== 0x03) {\n    throw new Error(\"Public key must be compressed secp256k1, i.e. 33 bytes starting with 0x02 or 0x03\");\n  }\n\n  return {\n    type: pubkeys_1.pubkeyType.secp256k1,\n    value: encoding_1.toBase64(pubkey)\n  };\n}\n\nexports.encodeSecp256k1Pubkey = encodeSecp256k1Pubkey; // As discussed in https://github.com/binance-chain/javascript-sdk/issues/163\n// Prefixes listed here: https://github.com/tendermint/tendermint/blob/d419fffe18531317c28c29a292ad7d253f6cafdf/docs/spec/blockchain/encoding.md#public-key-cryptography\n// Last bytes is varint-encoded length prefix\n\nconst pubkeyAminoPrefixSecp256k1 = encoding_1.fromHex(\"eb5ae987\" + \"21\"\n/* fixed length */\n);\nconst pubkeyAminoPrefixEd25519 = encoding_1.fromHex(\"1624de64\" + \"20\"\n/* fixed length */\n);\nconst pubkeyAminoPrefixSr25519 = encoding_1.fromHex(\"0dfb1005\" + \"20\"\n/* fixed length */\n);\n/** See https://github.com/tendermint/tendermint/commit/38b401657e4ad7a7eeb3c30a3cbf512037df3740 */\n\nconst pubkeyAminoPrefixMultisigThreshold = encoding_1.fromHex(\"22c1f7e2\"\n/* variable length not included */\n);\n/**\n * Decodes a pubkey in the Amino binary format to a type/value object.\n */\n\nfunction decodeAminoPubkey(data) {\n  if (utils_1.arrayContentStartsWith(data, pubkeyAminoPrefixSecp256k1)) {\n    const rest = data.slice(pubkeyAminoPrefixSecp256k1.length);\n\n    if (rest.length !== 33) {\n      throw new Error(\"Invalid rest data length. Expected 33 bytes (compressed secp256k1 pubkey).\");\n    }\n\n    return {\n      type: pubkeys_1.pubkeyType.secp256k1,\n      value: encoding_1.toBase64(rest)\n    };\n  } else if (utils_1.arrayContentStartsWith(data, pubkeyAminoPrefixEd25519)) {\n    const rest = data.slice(pubkeyAminoPrefixEd25519.length);\n\n    if (rest.length !== 32) {\n      throw new Error(\"Invalid rest data length. Expected 32 bytes (Ed25519 pubkey).\");\n    }\n\n    return {\n      type: pubkeys_1.pubkeyType.ed25519,\n      value: encoding_1.toBase64(rest)\n    };\n  } else if (utils_1.arrayContentStartsWith(data, pubkeyAminoPrefixSr25519)) {\n    const rest = data.slice(pubkeyAminoPrefixSr25519.length);\n\n    if (rest.length !== 32) {\n      throw new Error(\"Invalid rest data length. Expected 32 bytes (Sr25519 pubkey).\");\n    }\n\n    return {\n      type: pubkeys_1.pubkeyType.sr25519,\n      value: encoding_1.toBase64(rest)\n    };\n  } else if (utils_1.arrayContentStartsWith(data, pubkeyAminoPrefixMultisigThreshold)) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return decodeMultisigPubkey(data);\n  } else {\n    throw new Error(\"Unsupported public key type. Amino data starts with: \" + encoding_1.toHex(data.slice(0, 5)));\n  }\n}\n\nexports.decodeAminoPubkey = decodeAminoPubkey;\n/**\n * Decodes a bech32 pubkey to Amino binary, which is then decoded to a type/value object.\n * The bech32 prefix is ignored and discareded.\n *\n * @param bechEncoded the bech32 encoded pubkey\n */\n\nfunction decodeBech32Pubkey(bechEncoded) {\n  const {\n    data\n  } = encoding_1.Bech32.decode(bechEncoded);\n  return decodeAminoPubkey(data);\n}\n\nexports.decodeBech32Pubkey = decodeBech32Pubkey;\n/**\n * Uvarint decoder for Amino.\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/decoder.go#L64-76\n * @returns varint as number, and bytes count occupied by varaint\n */\n\nfunction decodeUvarint(reader) {\n  if (reader.length < 1) {\n    throw new Error(\"Can't decode varint. EOF\");\n  }\n\n  if (reader[0] > 127) {\n    throw new Error(\"Decoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.Varint implementation from the Go standard library and write some tests.\");\n  }\n\n  return [reader[0], 1];\n}\n/**\n * Decodes a multisig pubkey to type object.\n * Pubkey structure [ prefix + const + threshold + loop:(const + pubkeyLength + pubkey            ) ]\n *                  [   4b   + 1b    +  varint   + loop:(1b    +    varint    + pubkeyLength bytes) ]\n * @param data encoded pubkey\n */\n\n\nfunction decodeMultisigPubkey(data) {\n  const reader = Array.from(data); // remove multisig amino prefix;\n\n  const prefixFromReader = reader.splice(0, pubkeyAminoPrefixMultisigThreshold.length);\n\n  if (!utils_1.arrayContentStartsWith(prefixFromReader, pubkeyAminoPrefixMultisigThreshold)) {\n    throw new Error(\"Invalid multisig prefix.\");\n  } // remove 0x08 threshold prefix;\n\n\n  if (reader.shift() != 0x08) {\n    throw new Error(\"Invalid multisig data. Expecting 0x08 prefix before threshold.\");\n  } // read threshold\n\n\n  const [threshold, thresholdBytesLength] = decodeUvarint(reader);\n  reader.splice(0, thresholdBytesLength); // read participants pubkeys\n\n  const pubkeys = [];\n\n  while (reader.length > 0) {\n    // remove 0x12 threshold prefix;\n    if (reader.shift() != 0x12) {\n      throw new Error(\"Invalid multisig data. Expecting 0x12 prefix before participant pubkey length.\");\n    } // read pubkey length\n\n\n    const [pubkeyLength, pubkeyLengthBytesSize] = decodeUvarint(reader);\n    reader.splice(0, pubkeyLengthBytesSize); // verify that we can read pubkey\n\n    if (reader.length < pubkeyLength) {\n      throw new Error(\"Invalid multisig data length.\");\n    } // read and decode participant pubkey\n\n\n    const encodedPubkey = reader.splice(0, pubkeyLength);\n    const pubkey = decodeAminoPubkey(Uint8Array.from(encodedPubkey));\n    pubkeys.push(pubkey);\n  }\n\n  return {\n    type: pubkeys_1.pubkeyType.multisigThreshold,\n    value: {\n      threshold: threshold.toString(),\n      pubkeys: pubkeys\n    }\n  };\n}\n/**\n * Uvarint encoder for Amino. This is the same encoding as `binary.PutUvarint` from the Go\n * standard library.\n *\n * @see https://github.com/tendermint/go-amino/blob/8e779b71f40d175/encoder.go#L77-L85\n */\n\n\nfunction encodeUvarint(value) {\n  const checked = math_1.Uint53.fromString(value.toString()).toNumber();\n\n  if (checked > 127) {\n    throw new Error(\"Encoding numbers > 127 is not supported here. Please tell those lazy CosmJS maintainers to port the binary.PutUvarint implementation from the Go standard library and write some tests.\");\n  }\n\n  return [checked];\n}\n/**\n * Encodes a public key to binary Amino.\n */\n\n\nfunction encodeAminoPubkey(pubkey) {\n  if (pubkeys_1.isMultisigThresholdPubkey(pubkey)) {\n    const out = Array.from(pubkeyAminoPrefixMultisigThreshold);\n    out.push(0x08); // TODO: What is this?\n\n    out.push(...encodeUvarint(pubkey.value.threshold));\n\n    for (const pubkeyData of pubkey.value.pubkeys.map(p => encodeAminoPubkey(p))) {\n      out.push(0x12); // TODO: What is this?\n\n      out.push(...encodeUvarint(pubkeyData.length));\n      out.push(...pubkeyData);\n    }\n\n    return new Uint8Array(out);\n  } else if (pubkeys_1.isEd25519Pubkey(pubkey)) {\n    return new Uint8Array([...pubkeyAminoPrefixEd25519, ...encoding_1.fromBase64(pubkey.value)]);\n  } else if (pubkeys_1.isSecp256k1Pubkey(pubkey)) {\n    return new Uint8Array([...pubkeyAminoPrefixSecp256k1, ...encoding_1.fromBase64(pubkey.value)]);\n  } else {\n    throw new Error(\"Unsupported pubkey type\");\n  }\n}\n\nexports.encodeAminoPubkey = encodeAminoPubkey;\n/**\n * Encodes a public key to binary Amino and then to bech32.\n *\n * @param pubkey the public key to encode\n * @param prefix the bech32 prefix (human readable part)\n */\n\nfunction encodeBech32Pubkey(pubkey, prefix) {\n  return encoding_1.Bech32.encode(prefix, encodeAminoPubkey(pubkey));\n}\n\nexports.encodeBech32Pubkey = encodeBech32Pubkey;","map":{"version":3,"mappings":"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","names":["encodeSecp256k1Pubkey","pubkey","length","Error","type","pubkeys_1","secp256k1","value","encoding_1","exports","pubkeyAminoPrefixSecp256k1","pubkeyAminoPrefixEd25519","pubkeyAminoPrefixSr25519","pubkeyAminoPrefixMultisigThreshold","decodeAminoPubkey","data","utils_1","rest","slice","ed25519","sr25519","decodeMultisigPubkey","decodeBech32Pubkey","bechEncoded","decode","decodeUvarint","reader","Array","from","prefixFromReader","splice","shift","threshold","thresholdBytesLength","pubkeys","pubkeyLength","pubkeyLengthBytesSize","encodedPubkey","Uint8Array","push","multisigThreshold","toString","encodeUvarint","checked","math_1","fromString","toNumber","encodeAminoPubkey","out","pubkeyData","map","p","encodeBech32Pubkey","prefix","encode"],"sourceRoot":"","sources":["../src/encoding.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}