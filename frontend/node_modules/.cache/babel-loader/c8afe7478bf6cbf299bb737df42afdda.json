{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnglishMnemonic = void 0;\n\nconst bip39 = __importStar(require(\"bip39\"));\n\nclass EnglishMnemonic {\n  constructor(mnemonic) {\n    if (!EnglishMnemonic.mnemonicMatcher.test(mnemonic)) {\n      throw new Error(\"Invalid mnemonic format\");\n    }\n\n    const words = mnemonic.split(\" \");\n    const allowedWordsLengths = [12, 15, 18, 21, 24];\n\n    if (allowedWordsLengths.indexOf(words.length) === -1) {\n      throw new Error(`Invalid word count in mnemonic (allowed: ${allowedWordsLengths} got: ${words.length})`);\n    }\n\n    for (const word of words) {\n      if (EnglishMnemonic.wordlist.indexOf(word) === -1) {\n        throw new Error(\"Mnemonic contains invalid word\");\n      }\n    } // Throws with informative error message if mnemonic is not valid\n\n\n    bip39.mnemonicToEntropy(mnemonic);\n    this.data = mnemonic;\n  }\n\n  toString() {\n    return this.data;\n  }\n\n}\n\nexports.EnglishMnemonic = EnglishMnemonic;\nEnglishMnemonic.wordlist = bip39.wordlists.english; // list of space separated lower case words (1 or more)\n\nEnglishMnemonic.mnemonicMatcher = /^[a-z]+( [a-z]+)*$/;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA,MAAaA,eAAb,CAA4B;AAQ1BC,cAAmBC,QAAnB,EAAmC;AACjC,QAAI,CAACF,eAAe,CAACG,eAAhB,CAAgCC,IAAhC,CAAqCF,QAArC,CAAL,EAAqD;AACnD,YAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,UAAMC,KAAK,GAAGJ,QAAQ,CAACK,KAAT,CAAe,GAAf,CAAd;AACA,UAAMC,mBAAmB,GAAsB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,CAA/C;;AACA,QAAIA,mBAAmB,CAACC,OAApB,CAA4BH,KAAK,CAACI,MAAlC,MAA8C,CAAC,CAAnD,EAAsD;AACpD,YAAM,IAAIL,KAAJ,CACJ,4CAA4CG,mBAAmB,SAASF,KAAK,CAACI,MAAM,GADhF,CAAN;AAGD;;AAED,SAAK,MAAMC,IAAX,IAAmBL,KAAnB,EAA0B;AACxB,UAAIN,eAAe,CAACY,QAAhB,CAAyBH,OAAzB,CAAiCE,IAAjC,MAA2C,CAAC,CAAhD,EAAmD;AACjD,cAAM,IAAIN,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF,KAjBgC,CAmBjC;;;AACAQ,SAAK,CAACC,iBAAN,CAAwBZ,QAAxB;AAEA,SAAKa,IAAL,GAAYb,QAAZ;AACD;;AAEMc,UAAQ;AACb,WAAO,KAAKD,IAAZ;AACD;;AAnCyB;;AAA5BE;AACyBjB,2BAA8Ba,KAAK,CAACK,SAAN,CAAgBC,OAA9C,C,CAEvB;;AACwBnB,kCAAkB,oBAAlB","names":["EnglishMnemonic","constructor","mnemonic","mnemonicMatcher","test","Error","words","split","allowedWordsLengths","indexOf","length","word","wordlist","bip39","mnemonicToEntropy","data","toString","exports","wordlists","english"],"sourceRoot":"","sources":["../src/englishmnemonic.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}