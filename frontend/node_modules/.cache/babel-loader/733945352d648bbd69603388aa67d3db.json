{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst utils_1 = require(\"@cosmjs/utils\");\n\nconst query_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/query\");\n\nconst coin_1 = require(\"cosmjs-types/cosmos/base/v1beta1/coin\");\n\nconst utils_2 = require(\"./utils\");\n\nfunction setupBankExtension(base) {\n  const rpc = utils_2.createProtobufRpcClient(base); // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    bank: {\n      balance: async (address, denom) => {\n        const {\n          balance\n        } = await queryService.Balance({\n          address: address,\n          denom: denom\n        });\n        utils_1.assert(balance);\n        return balance;\n      },\n      allBalances: async address => {\n        const {\n          balances\n        } = await queryService.AllBalances({\n          address: address\n        });\n        return balances;\n      },\n      totalSupply: async () => {\n        const {\n          supply\n        } = await queryService.TotalSupply({});\n        return supply;\n      },\n      supplyOf: async denom => {\n        const {\n          amount\n        } = await queryService.SupplyOf({\n          denom: denom\n        });\n        utils_1.assert(amount);\n        return amount;\n      },\n      verified: {\n        balance: async (address, denom) => {\n          // balance key is a bit tricker, using some prefix stores\n          // https://github.com/cosmwasm/cosmos-sdk/blob/80f7ff62f79777a487d0c7a53c64b0f7e43c47b9/x/bank/keeper/view.go#L74-L77\n          // (\"balances\", binAddress, denom)\n          // it seem like prefix stores just do a dumb concat with the keys (no tricks to avoid overlap)\n          // https://github.com/cosmos/cosmos-sdk/blob/2879c0702c87dc9dd828a8c42b9224dc054e28ad/store/prefix/store.go#L61-L64\n          // https://github.com/cosmos/cosmos-sdk/blob/2879c0702c87dc9dd828a8c42b9224dc054e28ad/store/prefix/store.go#L37-L43\n          const key = Uint8Array.from([...encoding_1.toAscii(\"balances\"), ...utils_2.toAccAddress(address), ...encoding_1.toAscii(denom)]);\n          const responseData = await base.queryVerified(\"bank\", key);\n          return responseData.length ? coin_1.Coin.decode(responseData) : null;\n        }\n      }\n    }\n  };\n}\n\nexports.setupBankExtension = setupBankExtension;","map":{"version":3,"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AAmBA,SAAgBA,kBAAhB,CAAmCC,IAAnC,EAAoD;AAClD,QAAMC,GAAG,GAAGC,gCAAwBF,IAAxB,CAAZ,CADkD,CAElD;AACA;;AACA,QAAMG,YAAY,GAAG,IAAIC,uBAAJ,CAAoBH,GAApB,CAArB;AAEA,SAAO;AACLI,QAAI,EAAE;AACJC,aAAO,EAAE,OAAOC,OAAP,EAAwBC,KAAxB,KAAyC;AAChD,cAAM;AAAEF;AAAF,YAAc,MAAMH,YAAY,CAACM,OAAb,CAAqB;AAAEF,iBAAO,EAAEA,OAAX;AAAoBC,eAAK,EAAEA;AAA3B,SAArB,CAA1B;AACAE,uBAAOJ,OAAP;AACA,eAAOA,OAAP;AACD,OALG;AAMJK,iBAAW,EAAE,MAAOJ,OAAP,IAA0B;AACrC,cAAM;AAAEK;AAAF,YAAe,MAAMT,YAAY,CAACU,WAAb,CAAyB;AAAEN,iBAAO,EAAEA;AAAX,SAAzB,CAA3B;AACA,eAAOK,QAAP;AACD,OATG;AAUJE,iBAAW,EAAE,YAAW;AACtB,cAAM;AAAEC;AAAF,YAAa,MAAMZ,YAAY,CAACa,WAAb,CAAyB,EAAzB,CAAzB;AACA,eAAOD,MAAP;AACD,OAbG;AAcJE,cAAQ,EAAE,MAAOT,KAAP,IAAwB;AAChC,cAAM;AAAEU;AAAF,YAAa,MAAMf,YAAY,CAACgB,QAAb,CAAsB;AAAEX,eAAK,EAAEA;AAAT,SAAtB,CAAzB;AACAE,uBAAOQ,MAAP;AACA,eAAOA,MAAP;AACD,OAlBG;AAmBJE,cAAQ,EAAE;AACRd,eAAO,EAAE,OAAOC,OAAP,EAAwBC,KAAxB,KAAyC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAMa,GAAG,GAAGC,UAAU,CAACC,IAAX,CAAgB,CAAC,GAAGC,mBAAQ,UAAR,CAAJ,EAAyB,GAAGtB,qBAAaK,OAAb,CAA5B,EAAmD,GAAGiB,mBAAQhB,KAAR,CAAtD,CAAhB,CAAZ;AACA,gBAAMiB,YAAY,GAAG,MAAMzB,IAAI,CAAC0B,aAAL,CAAmB,MAAnB,EAA2BL,GAA3B,CAA3B;AACA,iBAAOI,YAAY,CAACE,MAAb,GAAsBC,YAAKC,MAAL,CAAYJ,YAAZ,CAAtB,GAAkD,IAAzD;AACD;AAXO;AAnBN;AADD,GAAP;AAmCD;;AAzCDK","names":["setupBankExtension","base","rpc","utils_2","queryService","query_1","bank","balance","address","denom","Balance","utils_1","allBalances","balances","AllBalances","totalSupply","supply","TotalSupply","supplyOf","amount","SupplyOf","verified","key","Uint8Array","from","encoding_1","responseData","queryVerified","length","coin_1","decode","exports"],"sourceRoot":"","sources":["../../src/queries/bank.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}