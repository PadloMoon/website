{"ast":null,"code":"import { ethers } from \"ethers\"; // npm install ethers\n// This is the SDK provided by Crypto.com DeFi Wallet\n\nimport { DeFiWeb3Connector } from \"deficonnect\";\nimport * as config from \"../config/config\";\nimport * as utils from \"./utils\";\nimport { defaultWallet } from \"../slices/interfaces\"; // Main login flow for Crypto.com DeFi Wallet with Wallet Extension\n// The connector must be activated, then it exposes a provider\n// that is used by the ethers Web3Provider constructor.\n\nexport const connect = async () => {\n  try {\n    const connector = new DeFiWeb3Connector({\n      supportedChainIds: [config.configVars.rpcNetwork.chainId],\n      rpc: {\n        [config.configVars.rpcNetwork.chainId]: config.configVars.rpcNetwork.rpcUrl\n      },\n      pollingInterval: 15000\n    });\n    await connector.activate();\n    const provider = await connector.getProvider();\n    const web3Provider = new ethers.providers.Web3Provider(provider);\n\n    if (!(parseInt(provider.chainId) === config.configVars.rpcNetwork.chainId)) {\n      window.alert(\"Switch your Wallet to blockchain network \" + config.configVars.rpcNetwork.chainName);\n      return defaultWallet;\n    } // Subscribe to events that reload the app\n\n\n    connector.on(\"session_update\", utils.reloadApp);\n    connector.on(\"Web3ReactDeactivate\", utils.reloadApp);\n    connector.on(\"Web3ReactUpdate\", utils.reloadApp);\n    return { ...defaultWallet,\n      walletProviderName: \"defiwallet\",\n      address: (await web3Provider.listAccounts())[0],\n      browserWeb3Provider: web3Provider,\n      serverWeb3Provider: new ethers.providers.JsonRpcProvider(config.configVars.rpcNetwork.rpcUrl),\n      wcProvider: provider,\n      wcConnector: connector,\n      connected: true,\n      chainId: provider.chainId\n    };\n  } catch (e) {\n    window.alert(e);\n    return defaultWallet;\n  }\n};","map":{"version":3,"sources":["/home/vanka/dev/padlomoon/frontend/src/utils/defiwallet.ts"],"names":["ethers","DeFiWeb3Connector","config","utils","defaultWallet","connect","connector","supportedChainIds","configVars","rpcNetwork","chainId","rpc","rpcUrl","pollingInterval","activate","provider","getProvider","web3Provider","providers","Web3Provider","parseInt","window","alert","chainName","on","reloadApp","walletProviderName","address","listAccounts","browserWeb3Provider","serverWeb3Provider","JsonRpcProvider","wcProvider","wcConnector","connected","e"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB,C,CAAiC;AAEjC;;AACA,SAASC,iBAAT,QAAkC,aAAlC;AAEA,OAAO,KAAKC,MAAZ,MAAwB,kBAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,SAAkBC,aAAlB,QAAuC,sBAAvC,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAG,YAA8B;AACnD,MAAI;AACF,UAAMC,SAAS,GAAG,IAAIL,iBAAJ,CAAsB;AACtCM,MAAAA,iBAAiB,EAAE,CAACL,MAAM,CAACM,UAAP,CAAkBC,UAAlB,CAA6BC,OAA9B,CADmB;AAEtCC,MAAAA,GAAG,EAAE;AACH,SAACT,MAAM,CAACM,UAAP,CAAkBC,UAAlB,CAA6BC,OAA9B,GACER,MAAM,CAACM,UAAP,CAAkBC,UAAlB,CAA6BG;AAF5B,OAFiC;AAMtCC,MAAAA,eAAe,EAAE;AANqB,KAAtB,CAAlB;AAQA,UAAMP,SAAS,CAACQ,QAAV,EAAN;AACA,UAAMC,QAAQ,GAAG,MAAMT,SAAS,CAACU,WAAV,EAAvB;AACA,UAAMC,YAAY,GAAG,IAAIjB,MAAM,CAACkB,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAArB;;AACA,QACE,EAAEK,QAAQ,CAACL,QAAQ,CAACL,OAAV,CAAR,KAA+BR,MAAM,CAACM,UAAP,CAAkBC,UAAlB,CAA6BC,OAA9D,CADF,EAEE;AACAW,MAAAA,MAAM,CAACC,KAAP,CACE,8CACEpB,MAAM,CAACM,UAAP,CAAkBC,UAAlB,CAA6Bc,SAFjC;AAIA,aAAOnB,aAAP;AACD,KApBC,CAqBF;;;AACAE,IAAAA,SAAS,CAACkB,EAAV,CAAa,gBAAb,EAA+BrB,KAAK,CAACsB,SAArC;AACAnB,IAAAA,SAAS,CAACkB,EAAV,CAAa,qBAAb,EAAoCrB,KAAK,CAACsB,SAA1C;AACAnB,IAAAA,SAAS,CAACkB,EAAV,CAAa,iBAAb,EAAgCrB,KAAK,CAACsB,SAAtC;AAEA,WAAO,EACL,GAAGrB,aADE;AAELsB,MAAAA,kBAAkB,EAAE,YAFf;AAGLC,MAAAA,OAAO,EAAE,CAAC,MAAMV,YAAY,CAACW,YAAb,EAAP,EAAoC,CAApC,CAHJ;AAILC,MAAAA,mBAAmB,EAAEZ,YAJhB;AAKLa,MAAAA,kBAAkB,EAAE,IAAI9B,MAAM,CAACkB,SAAP,CAAiBa,eAArB,CAClB7B,MAAM,CAACM,UAAP,CAAkBC,UAAlB,CAA6BG,MADX,CALf;AAQLoB,MAAAA,UAAU,EAAEjB,QARP;AASLkB,MAAAA,WAAW,EAAE3B,SATR;AAUL4B,MAAAA,SAAS,EAAE,IAVN;AAWLxB,MAAAA,OAAO,EAAEK,QAAQ,CAACL;AAXb,KAAP;AAaD,GAvCD,CAuCE,OAAOyB,CAAP,EAAU;AACVd,IAAAA,MAAM,CAACC,KAAP,CAAaa,CAAb;AACA,WAAO/B,aAAP;AACD;AACF,CA5CM","sourcesContent":["import { ethers } from \"ethers\"; // npm install ethers\n\n// This is the SDK provided by Crypto.com DeFi Wallet\nimport { DeFiWeb3Connector } from \"deficonnect\";\n\nimport * as config from \"../config/config\";\nimport * as utils from \"./utils\";\nimport { IWallet, defaultWallet } from \"../slices/interfaces\";\n\n// Main login flow for Crypto.com DeFi Wallet with Wallet Extension\n// The connector must be activated, then it exposes a provider\n// that is used by the ethers Web3Provider constructor.\nexport const connect = async (): Promise<IWallet> => {\n  try {\n    const connector = new DeFiWeb3Connector({\n      supportedChainIds: [config.configVars.rpcNetwork.chainId],\n      rpc: {\n        [config.configVars.rpcNetwork.chainId]:\n          config.configVars.rpcNetwork.rpcUrl,\n      },\n      pollingInterval: 15000,\n    });\n    await connector.activate();\n    const provider = await connector.getProvider();\n    const web3Provider = new ethers.providers.Web3Provider(provider);\n    if (\n      !(parseInt(provider.chainId) === config.configVars.rpcNetwork.chainId)\n    ) {\n      window.alert(\n        \"Switch your Wallet to blockchain network \" +\n          config.configVars.rpcNetwork.chainName\n      );\n      return defaultWallet;\n    }\n    // Subscribe to events that reload the app\n    connector.on(\"session_update\", utils.reloadApp);\n    connector.on(\"Web3ReactDeactivate\", utils.reloadApp);\n    connector.on(\"Web3ReactUpdate\", utils.reloadApp);\n\n    return {\n      ...defaultWallet,\n      walletProviderName: \"defiwallet\",\n      address: (await web3Provider.listAccounts())[0],\n      browserWeb3Provider: web3Provider,\n      serverWeb3Provider: new ethers.providers.JsonRpcProvider(\n        config.configVars.rpcNetwork.rpcUrl\n      ),\n      wcProvider: provider,\n      wcConnector: connector,\n      connected: true,\n      chainId: provider.chainId,\n    };\n  } catch (e) {\n    window.alert(e);\n    return defaultWallet;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}