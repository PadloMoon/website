{"ast":null,"code":"var _jsxFileName = \"/home/vanka/dev/padlomoon/frontend/src/components/WalletConnect/WalletConnect.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Modal, Card } from \"react-bootstrap\";\nimport classNames from \"classnames\";\nimport { useAppDispatch } from \"../../slices/hooks\";\nimport MetamaskLogo from \"../../assets/icons/metamask-minified.svg\";\nimport * as walletMetamask from \"../../utils/metamask\";\nimport * as walletDefiwallet from \"../../utils/defiwallet\";\nimport * as walletConnect from \"../../utils/walletConnect\";\nimport { setRefreshing, updateQueryResults, updateWallet } from \"../../slices/walletSlice\";\nimport * as utils from \"../../utils/utils\";\nimport { defaultQueryResults } from \"../../slices/interfaces\";\nimport styles from \"./WalletConnect.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WalletConnect = props => {\n  _s();\n\n  const {\n    show,\n    handleClose\n  } = props;\n  const dispatch = useAppDispatch();\n\n  const handleConnect = async option => {\n    handleClose();\n    dispatch(setRefreshing({\n      status: true,\n      message: \"Connecting wallet...\"\n    }));\n    let wallet;\n\n    switch (option) {\n      case \"metamask-injected\":\n        wallet = await walletMetamask.connect();\n        break;\n\n      case \"defiwallet\":\n        wallet = await walletDefiwallet.connect();\n        break;\n\n      case \"wallet-connect\":\n        wallet = await walletConnect.connect();\n        break;\n\n      default:\n        wallet = await walletMetamask.connect();\n        break;\n    }\n\n    if (wallet.connected) {\n      const lastBlockNumber = await utils.getLastBlockNumber(wallet.serverWeb3Provider);\n      const croBalance = await utils.getCroBalance(wallet.serverWeb3Provider, wallet.address);\n      const padloBalance = await utils.getPadloBalance(wallet.serverWeb3Provider, wallet.address);\n      console.log(\"padloBalance\", padloBalance);\n      console.log(\"cro\", croBalance);\n      dispatch(updateWallet(wallet));\n      dispatch(updateQueryResults({ ...defaultQueryResults,\n        lastBlockNumber,\n        croBalance,\n        padloBalance: 0\n      }));\n    }\n\n    dispatch(setRefreshing({\n      status: false,\n      message: \"Completed\"\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    show: show,\n    onHide: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n      closeButton: true,\n      children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n        className: styles.ModalTitle,\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n      className: styles.ModalBody,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        className: styles.card,\n        children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n          variant: \"top\",\n          src: MetamaskLogo,\n          className: classNames(styles.MetamaskLogo, styles.WalletLogo),\n          onClick: () => handleConnect(\"metamask-injected\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: /*#__PURE__*/_jsxDEV(Card.Text, {\n            className: styles.WalletName,\n            children: \"Metamask\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WalletConnect, \"BJQ1DUn/XFEl2NsQ3DWyHAXfnkY=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c = WalletConnect;\nexport default WalletConnect;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletConnect\");","map":{"version":3,"sources":["/home/vanka/dev/padlomoon/frontend/src/components/WalletConnect/WalletConnect.tsx"],"names":["React","Modal","Card","classNames","useAppDispatch","walletMetamask","walletDefiwallet","walletConnect","setRefreshing","updateQueryResults","updateWallet","utils","defaultQueryResults","styles","WalletConnect","props","show","handleClose","dispatch","handleConnect","option","status","message","wallet","connect","connected","lastBlockNumber","getLastBlockNumber","serverWeb3Provider","croBalance","getCroBalance","address","padloBalance","getPadloBalance","console","log","ModalTitle","ModalBody","card","MetamaskLogo","WalletLogo","WalletName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Modal, Card } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\nimport { useAppDispatch } from \"../../slices/hooks\";\nimport MetamaskLogo from \"../../assets/icons/metamask-minified.svg\";\nimport WalletConnectLogo from \"../../assets/icons/walletconnect-logo.svg\";\nimport DefiWalletLogo from \"../../assets/icons/defiwallet.png\";\n\nimport * as walletMetamask from \"../../utils/metamask\";\nimport * as walletDefiwallet from \"../../utils/defiwallet\";\nimport * as walletConnect from \"../../utils/walletConnect\";\nimport {\n  setRefreshing,\n  updateQueryResults,\n  updateWallet,\n} from \"../../slices/walletSlice\";\nimport * as utils from \"../../utils/utils\";\nimport { defaultQueryResults, IWallet } from \"../../slices/interfaces\";\n\nimport styles from \"./WalletConnect.module.css\";\n\ntype Props = {\n  show: boolean;\n  handleClose: () => void;\n};\n\nconst WalletConnect = (props: Props) => {\n  const { show, handleClose } = props;\n\n  const dispatch = useAppDispatch();\n  const handleConnect = async (\n    option: \"metamask-injected\" | \"defiwallet\" | \"wallet-connect\"\n  ) => {\n    handleClose();\n    dispatch(setRefreshing({ status: true, message: \"Connecting wallet...\" }));\n    let wallet: IWallet;\n    switch (option) {\n      case \"metamask-injected\":\n        wallet = await walletMetamask.connect();\n        break;\n      case \"defiwallet\":\n        wallet = await walletDefiwallet.connect();\n        break;\n      case \"wallet-connect\":\n        wallet = await walletConnect.connect();\n        break;\n      default:\n        wallet = await walletMetamask.connect();\n        break;\n    }\n    if (wallet.connected) {\n      const lastBlockNumber = await utils.getLastBlockNumber(\n        wallet.serverWeb3Provider\n      );\n      const croBalance = await utils.getCroBalance(\n        wallet.serverWeb3Provider,\n        wallet.address\n      );\n      const padloBalance = await utils.getPadloBalance(\n        wallet.serverWeb3Provider,\n        wallet.address\n      );\n      console.log(\"padloBalance\", padloBalance);\n      console.log(\"cro\", croBalance);\n      dispatch(updateWallet(wallet));\n      dispatch(\n        updateQueryResults({\n          ...defaultQueryResults,\n          lastBlockNumber,\n          croBalance,\n          padloBalance: 0,\n        })\n      );\n    }\n    dispatch(setRefreshing({ status: false, message: \"Completed\" }));\n  };\n  return (\n    <Modal show={show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title className={styles.ModalTitle}>\n          Connect your wallet\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body className={styles.ModalBody}>\n        <Card className={styles.card}>\n          <Card.Img\n            variant=\"top\"\n            src={MetamaskLogo}\n            className={classNames(styles.MetamaskLogo, styles.WalletLogo)}\n            onClick={() => handleConnect(\"metamask-injected\")}\n          />\n          <Card.Body>\n            <Card.Text className={styles.WalletName}>Metamask</Card.Text>\n          </Card.Body>\n        </Card>\n        {/* <Card className={styles.card}>\n          <Card.Img\n            variant=\"top\"\n            className={classNames(styles.WalletconnectLogo, styles.WalletLogo)}\n            src={WalletConnectLogo}\n            onClick={() => handleConnect(\"wallet-connect\")}\n          />\n          <Card.Body>\n            <Card.Text className={styles.WalletName}>WalletConnect</Card.Text>\n          </Card.Body>\n        </Card>\n        <Card className={styles.card}>\n          <Card.Img\n            variant=\"top\"\n            className={classNames(styles.DefiWalletLogo, styles.WalletLogo)}\n            src={DefiWalletLogo}\n            onClick={() => handleConnect(\"defiwallet\")}\n          />\n          <Card.Body>\n            <Card.Text className={styles.WalletName}>\n              Crypto.com DefiWallet\n            </Card.Text>\n          </Card.Body>\n        </Card> */}\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default WalletConnect;\n"]},"metadata":{},"sourceType":"module"}