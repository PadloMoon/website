{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.longify = exports.createProtobufRpcClient = exports.createPagination = exports.toAccAddress = void 0;\n\nconst encoding_1 = require(\"@cosmjs/encoding\");\n\nconst math_1 = require(\"@cosmjs/math\");\n\nconst long_1 = __importDefault(require(\"long\"));\n/**\n * Takes a bech32 encoded address and returns the data part. The prefix is ignored and discarded.\n * This is called AccAddress in Cosmos SDK, which is basically an alias for raw binary data.\n * The result is typically 20 bytes long but not restricted to that.\n */\n\n\nfunction toAccAddress(address) {\n  return encoding_1.Bech32.decode(address).data;\n}\n\nexports.toAccAddress = toAccAddress;\n/**\n * If paginationKey is set, return a `PageRequest` with the given key.\n * If paginationKey is unset, return `undefined`.\n *\n * Use this with a query response's pagination next key to\n * request the next page.\n */\n\nfunction createPagination(paginationKey) {\n  return paginationKey ? {\n    key: paginationKey,\n    offset: long_1.default.fromNumber(0, true),\n    limit: long_1.default.fromNumber(0, true),\n    countTotal: false\n  } : undefined;\n}\n\nexports.createPagination = createPagination;\n\nfunction createProtobufRpcClient(base) {\n  return {\n    request: (service, method, data) => {\n      const path = `/${service}/${method}`;\n      return base.queryUnverified(path, data);\n    }\n  };\n}\n\nexports.createProtobufRpcClient = createProtobufRpcClient;\n/**\n * Takes a uint64 value as string, number, Long or Uint64 and returns an unsigned Long instance\n * of it.\n */\n\nfunction longify(value) {\n  const checkedValue = math_1.Uint64.fromString(value.toString());\n  return long_1.default.fromBytesBE([...checkedValue.toBytesBigEndian()], true);\n}\n\nexports.longify = longify;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;AAIA;;;;;;;AAKA,SAAgBA,YAAhB,CAA6BC,OAA7B,EAA4C;AAC1C,SAAOC,kBAAOC,MAAP,CAAcF,OAAd,EAAuBG,IAA9B;AACD;;AAFDC;AAIA;;;;;;;;AAOA,SAAgBC,gBAAhB,CAAiCC,aAAjC,EAA2D;AACzD,SAAOA,aAAa,GAChB;AACEC,OAAG,EAAED,aADP;AAEEE,UAAM,EAAEC,eAAKC,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,CAFV;AAGEC,SAAK,EAAEF,eAAKC,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,CAHT;AAIEE,cAAU,EAAE;AAJd,GADgB,GAOhBC,SAPJ;AAQD;;AATDT;;AAeA,SAAgBU,uBAAhB,CAAwCC,IAAxC,EAAyD;AACvD,SAAO;AACLC,WAAO,EAAE,CAACC,OAAD,EAAkBC,MAAlB,EAAkCf,IAAlC,KAA2E;AAClF,YAAMgB,IAAI,GAAG,IAAIF,OAAO,IAAIC,MAAM,EAAlC;AACA,aAAOH,IAAI,CAACK,eAAL,CAAqBD,IAArB,EAA2BhB,IAA3B,CAAP;AACD;AAJI,GAAP;AAMD;;AAPDC;AASA;;;;;AAIA,SAAgBiB,OAAhB,CAAwBC,KAAxB,EAA8D;AAC5D,QAAMC,YAAY,GAAGC,cAAOC,UAAP,CAAkBH,KAAK,CAACI,QAAN,EAAlB,CAArB;AACA,SAAOjB,eAAKkB,WAAL,CAAiB,CAAC,GAAGJ,YAAY,CAACK,gBAAb,EAAJ,CAAjB,EAAuD,IAAvD,CAAP;AACD;;AAHDxB","names":["toAccAddress","address","encoding_1","decode","data","exports","createPagination","paginationKey","key","offset","long_1","fromNumber","limit","countTotal","undefined","createProtobufRpcClient","base","request","service","method","path","queryUnverified","longify","value","checkedValue","math_1","fromString","toString","fromBytesBE","toBytesBigEndian"],"sourceRoot":"","sources":["../../src/queries/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}